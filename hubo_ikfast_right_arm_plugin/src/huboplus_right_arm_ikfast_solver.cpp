/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 61 generated on 2014-03-23 14:30:15.881011
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==61);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53;
x0=IKsin(j[0]);
x1=IKcos(j[2]);
x2=IKsin(j[1]);
x3=IKcos(j[0]);
x4=IKsin(j[2]);
x5=IKcos(j[3]);
x6=IKcos(j[1]);
x7=IKsin(j[3]);
x8=IKsin(j[4]);
x9=IKcos(j[4]);
x10=IKcos(j[5]);
x11=IKsin(j[5]);
x12=((IkReal(1.73000000000000e-6))*(x2));
x13=((IkReal(0.0219936000000000))*(x4));
x14=((IkReal(0.0100000000000000))*(x6));
x15=((IkReal(0.0100000000000000))*(x2));
x16=((IkReal(1.00000000000000))*(x4));
x17=((IkReal(1.00000000000000))*(x7));
x18=((IkReal(0.0219906000000000))*(x4));
x19=((IkReal(0.163958000000000))*(x4));
x20=((IkReal(0.0100000000000000))*(x4));
x21=((IkReal(1.00000000000000))*(x5));
x22=((IkReal(1.73000000000000e-6))*(x4));
x23=((IkReal(0.163958000000000))*(x5));
x24=((x1)*(x3));
x25=((x0)*(x2));
x26=((x3)*(x7));
x27=((x2)*(x5));
x28=((x1)*(x9));
x29=((x0)*(x6));
x30=((x2)*(x7));
x31=((x3)*(x6));
x32=((x0)*(x1));
x33=((x6)*(x7));
x34=((x2)*(x3));
x35=((x4)*(x5)*(x6));
x36=((x1)*(x6)*(x8));
x37=((x17)*(x29));
x38=((x21)*(x29));
x39=((x16)*(x33));
x40=((x16)*(x34));
x41=((x24)+(((x25)*(x4))));
x42=((((x1)*(x25)))+(((IkReal(-1.00000000000000))*(x16)*(x3))));
x43=((((IkReal(-1.00000000000000))*(x40)))+(x32));
x44=((((IkReal(-1.00000000000000))*(x32)))+(x40));
x45=((((IkReal(-1.00000000000000))*(x24)))+(((IkReal(-1.00000000000000))*(x16)*(x25))));
x46=((((x0)*(x16)))+(((IkReal(1.00000000000000))*(x2)*(x24))));
x47=((x43)*(x5));
x48=((x41)*(x5));
x49=((x45)*(x7));
x50=((((x9)*(((x30)+(x35)))))+(x36));
x51=((x47)+(((x26)*(x6))));
x52=((((x42)*(x8)))+(((x9)*(((((IkReal(-1.00000000000000))*(x37)))+(x48))))));
x53=((((IkReal(-1.00000000000000))*(x51)*(x9)))+(((IkReal(1.00000000000000))*(x46)*(x8))));
eerot[0]=((((x10)*(x52)))+(((x11)*(((((IkReal(-1.00000000000000))*(x38)))+(x49))))));
eerot[1]=((((x42)*(x9)))+(((x8)*(((x37)+(((IkReal(-1.00000000000000))*(x21)*(x41))))))));
eerot[2]=((((x11)*(x52)))+(((x10)*(((((IkReal(-1.00000000000000))*(x17)*(x45)))+(x38))))));
IkReal x54=((IkReal(1.00000000000000))*(x25));
IkReal x55=((IkReal(1.00000000000000))*(x3));
IkReal x56=((x29)*(x7));
eetrans[0]=((IkReal(0.0122581000000000))+(((x5)*(((((IkReal(-0.0219906000000000))*(x24)))+(((IkReal(-1.00000000000000))*(x18)*(x54)))))))+(((x9)*(((((x15)*(x32)))+(((IkReal(-1.00000000000000))*(x20)*(x55)))))))+(((x7)*(((((IkReal(-1.00000000000000))*(x19)*(x54)))+(((IkReal(-0.163958000000000))*(x24)))))))+(((x8)*(((((x0)*(x14)*(x7)))+(((IkReal(-0.0100000000000000))*(x48)))))))+(((x9)*(((((IkReal(1.73000000000000e-6))*(x48)))+(((IkReal(-1.73000000000000e-6))*(x56)))))))+(((IkReal(-0.182005000000000))*(x29)))+(((x13)*(x25)))+(((IkReal(0.0219906000000000))*(x56)))+(((x8)*(((((x12)*(x32)))+(((IkReal(-1.00000000000000))*(x22)*(x55)))))))+(((IkReal(-1.00000000000000))*(x23)*(x29)))+(((IkReal(0.0219936000000000))*(x24))));
eerot[3]=((((x10)*(x50)))+(((x11)*(((((IkReal(-1.00000000000000))*(x39)))+(x27))))));
eerot[4]=((((x8)*(((((IkReal(-1.00000000000000))*(x16)*(x5)*(x6)))+(((IkReal(-1.00000000000000))*(x17)*(x2)))))))+(((x28)*(x6))));
eerot[5]=((((x11)*(x50)))+(((x10)*(((((IkReal(-1.00000000000000))*(x2)*(x21)))+(x39))))));
IkReal x57=((IkReal(1.00000000000000))*(x5));
eetrans[1]=((IkReal(-0.211027000000000))+(((IkReal(1.73000000000000e-6))*(x36)))+(((x14)*(x28)))+(((IkReal(-0.0219906000000000))*(x30)))+(((IkReal(-1.00000000000000))*(x19)*(x33)))+(((x2)*(x23)))+(((IkReal(0.182005000000000))*(x2)))+(((x8)*(((((IkReal(-1.00000000000000))*(x14)*(x4)*(x57)))+(((IkReal(-1.00000000000000))*(x15)*(x7)))))))+(((x9)*(((((x12)*(x7)))+(((x22)*(x5)*(x6)))))))+(((IkReal(-1.00000000000000))*(x18)*(x57)*(x6)))+(((x13)*(x6))));
eerot[6]=((((x10)*(x53)))+(((x11)*(((((IkReal(-1.00000000000000))*(x17)*(x44)))+(((IkReal(-1.00000000000000))*(x21)*(x31))))))));
eerot[7]=((((x51)*(x8)))+(((x46)*(x9))));
eerot[8]=((((x11)*(x53)))+(((x10)*(((((x31)*(x5)))+(((x44)*(x7))))))));
IkReal x58=((x26)*(x6));
IkReal x59=((IkReal(1.00000000000000))*(x34));
eetrans[2]=((IkReal(0.0486356000000000))+(((x5)*(((((IkReal(-1.00000000000000))*(x18)*(x59)))+(((IkReal(0.0219906000000000))*(x32)))))))+(((x8)*(((((x14)*(x26)))+(((IkReal(0.0100000000000000))*(x47)))))))+(((IkReal(-0.182005000000000))*(x31)))+(((x7)*(((((IkReal(-1.00000000000000))*(x19)*(x59)))+(((IkReal(0.163958000000000))*(x32)))))))+(((x9)*(((((x0)*(x20)))+(((x15)*(x24)))))))+(((x8)*(((((x0)*(x22)))+(((x12)*(x24)))))))+(((x13)*(x34)))+(((x9)*(((((IkReal(-1.73000000000000e-6))*(x47)))+(((IkReal(-1.73000000000000e-6))*(x58)))))))+(((IkReal(-1.00000000000000))*(x23)*(x31)))+(((IkReal(0.0219906000000000))*(x58)))+(((IkReal(-0.0219936000000000))*(x32))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j22,cj22,sj22,htj22,j23,cj23,sj23,htj23,j24,cj24,sj24,htj24,j25,cj25,sj25,htj25,j26,cj26,sj26,htj26,j27,cj27,sj27,htj27,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij22[2], _nj22,_ij23[2], _nj23,_ij24[2], _nj24,_ij25[2], _nj25,_ij26[2], _nj26,_ij27[2], _nj27;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j22=numeric_limits<IkReal>::quiet_NaN(); _ij22[0] = -1; _ij22[1] = -1; _nj22 = -1; j23=numeric_limits<IkReal>::quiet_NaN(); _ij23[0] = -1; _ij23[1] = -1; _nj23 = -1; j24=numeric_limits<IkReal>::quiet_NaN(); _ij24[0] = -1; _ij24[1] = -1; _nj24 = -1; j25=numeric_limits<IkReal>::quiet_NaN(); _ij25[0] = -1; _ij25[1] = -1; _nj25 = -1; j26=numeric_limits<IkReal>::quiet_NaN(); _ij26[0] = -1; _ij26[1] = -1; _nj26 = -1; j27=numeric_limits<IkReal>::quiet_NaN(); _ij27[0] = -1; _ij27[1] = -1; _nj27 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=((IkReal(-1.00000000000000))*(r02));
new_r02=r01;
new_px=((IkReal(-0.0122581000000000))+(px)+(((IkReal(-0.0100000000000000))*(r01))));
new_r10=((IkReal(-1.00000000000000))*(r20));
new_r11=r22;
new_r12=((IkReal(-1.00000000000000))*(r21));
new_py=((IkReal(0.0486356000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(0.0100000000000000))*(r21))));
new_r20=r10;
new_r21=((IkReal(-1.00000000000000))*(r12));
new_r22=r11;
new_pz=((IkReal(0.211027000000000))+(py)+(((IkReal(-0.0100000000000000))*(r11))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((IkReal(-1.00000000000000))*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((IkReal(-1.00000000000000))*(pz)*(r00))));
rxp0_2=((((IkReal(-1.00000000000000))*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((IkReal(-1.00000000000000))*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((IkReal(-1.00000000000000))*(pz)*(r01))));
rxp1_2=((((IkReal(-1.00000000000000))*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((IkReal(-1.00000000000000))*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((IkReal(-1.00000000000000))*(pz)*(r02))));
rxp2_2=((((IkReal(-1.00000000000000))*(px)*(r12)))+(((py)*(r02))));
{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=((IkReal(-0.345963000000000))+(npy));
IkReal gconst1;
gconst1=((IkReal(2.00000000000000))*(npx));
IkReal gconst2;
gconst2=((IkReal(-0.345963000000000))+(((IkReal(-1.00000000000000))*(npy))));
IkReal gconst3;
gconst3=((IkReal(0.119690397375007))+(((IkReal(3.46000000000000e-6))*(npx)))+(((IkReal(-1.00000000000000))*(pp))));
IkReal gconst4;
gconst4=((IkReal(-6.92000000000000e-6))*(npy));
IkReal gconst5;
gconst5=((IkReal(0.119690397375007))+(((IkReal(-3.46000000000000e-6))*(npx)))+(((IkReal(-1.00000000000000))*(pp))));
IkReal gconst6;
gconst6=((IkReal(-0.345963000000000))+(npy));
IkReal gconst7;
gconst7=((IkReal(2.00000000000000))*(npx));
IkReal gconst8;
gconst8=((IkReal(-0.345963000000000))+(((IkReal(-1.00000000000000))*(npy))));
IkReal gconst9;
gconst9=((IkReal(0.119690397375007))+(((IkReal(3.46000000000000e-6))*(npx)))+(((IkReal(-1.00000000000000))*(pp))));
IkReal gconst10;
gconst10=((IkReal(-6.92000000000000e-6))*(npy));
IkReal gconst11;
gconst11=((IkReal(0.119690397375007))+(((IkReal(-3.46000000000000e-6))*(npx)))+(((IkReal(-1.00000000000000))*(pp))));
IkReal gconst12;
gconst12=IkReal(0.0439872000000000);
IkReal gconst13;
gconst13=IkReal(0.0439872000000000);
IkReal gconst14;
gconst14=IkReal(-0.0304337032872000);
IkReal gconst15;
gconst15=IkReal(-0.0304337032872000);
IkReal gconst16;
gconst16=IkReal(0.0439872000000000);
IkReal gconst17;
gconst17=IkReal(0.0439872000000000);
IkReal gconst18;
gconst18=IkReal(-0.0304337032872000);
IkReal gconst19;
gconst19=IkReal(-0.0304337032872000);
IkReal gconst20;
gconst20=((IkReal(0.0180470000000000))+(npy));
IkReal gconst21;
gconst21=((IkReal(2.00000000000000))*(npx));
IkReal gconst22;
gconst22=((IkReal(0.0180470000000000))+(((IkReal(-1.00000000000000))*(npy))));
IkReal gconst23;
gconst23=((IkReal(0.00226030405564710))+(((IkReal(3.46000000000000e-6))*(npx)))+(((IkReal(-1.00000000000000))*(pp))));
IkReal gconst24;
gconst24=((IkReal(-6.92000000000000e-6))*(npy));
IkReal gconst25;
gconst25=((IkReal(0.00226030405564710))+(((IkReal(-3.46000000000000e-6))*(npx)))+(((IkReal(-1.00000000000000))*(pp))));
IkReal gconst26;
gconst26=((IkReal(0.0180470000000000))+(npy));
IkReal gconst27;
gconst27=((IkReal(2.00000000000000))*(npx));
IkReal gconst28;
gconst28=((IkReal(0.0180470000000000))+(((IkReal(-1.00000000000000))*(npy))));
IkReal gconst29;
gconst29=((IkReal(0.00226030405564710))+(((IkReal(3.46000000000000e-6))*(npx)))+(((IkReal(-1.00000000000000))*(pp))));
IkReal gconst30;
gconst30=((IkReal(-6.92000000000000e-6))*(npy));
IkReal gconst31;
gconst31=((IkReal(0.00226030405564710))+(((IkReal(-3.46000000000000e-6))*(npx)))+(((IkReal(-1.00000000000000))*(pp))));
IkReal x60=((gconst22)*(gconst29));
IkReal x61=((gconst25)*(gconst29));
IkReal x62=((gconst26)*(gconst30));
IkReal x63=((gconst26)*(gconst31));
dummyeval[0]=((((gconst24)*(gconst27)*(x60)))+(((gconst21)*(gconst25)*(x62)))+(((IkReal(-1.00000000000000))*(gconst20)*(gconst25)*(x63)))+(((IkReal(-1.00000000000000))*(gconst22)*(gconst24)*(x62)))+(((gconst20)*(gconst28)*(x61)))+(((IkReal(-1.00000000000000))*(gconst23)*(gconst28)*(x60)))+(((gconst22)*(gconst23)*(x63)))+(((IkReal(-1.00000000000000))*(gconst21)*(gconst27)*(x61))));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[8+1], zeror[8];
int numroots;
IkReal x64=((gconst27)*(gconst29));
IkReal x65=((gconst22)*(gconst4));
IkReal x66=((IkReal(1.00000000000000))*(gconst25));
IkReal x67=((gconst19)*(gconst26));
IkReal x68=((IkReal(1.00000000000000))*(gconst3));
IkReal x69=((gconst8)*(gconst9));
IkReal x70=((gconst17)*(gconst18));
IkReal x71=((gconst20)*(gconst25));
IkReal x72=((gconst0)*(gconst5));
IkReal x73=((IkReal(1.00000000000000))*(gconst11));
IkReal x74=((gconst22)*(gconst23));
IkReal x75=((gconst16)*(gconst19));
IkReal x76=((gconst27)*(gconst9));
IkReal x77=((gconst11)*(gconst6));
IkReal x78=((gconst13)*(gconst3));
IkReal x79=((gconst2)*(gconst8));
IkReal x80=((gconst14)*(gconst2));
IkReal x81=((gconst11)*(gconst16));
IkReal x82=((gconst7)*(gconst9));
IkReal x83=((gconst13)*(gconst4));
IkReal x84=((gconst15)*(gconst20));
IkReal x85=((gconst2)*(gconst23));
IkReal x86=((gconst28)*(gconst29));
IkReal x87=((gconst17)*(gconst9));
IkReal x88=((IkReal(1.00000000000000))*(gconst21));
IkReal x89=((gconst26)*(gconst31));
IkReal x90=((gconst22)*(gconst3));
IkReal x91=((gconst17)*(gconst29));
IkReal x92=((gconst12)*(gconst25));
IkReal x93=((IkReal(1.00000000000000))*(gconst5));
IkReal x94=((gconst19)*(gconst6));
IkReal x95=((gconst18)*(gconst28));
IkReal x96=((gconst29)*(gconst8));
IkReal x97=((gconst13)*(gconst23));
IkReal x98=((gconst10)*(gconst6));
IkReal x99=((gconst2)*(gconst24));
IkReal x100=((IkReal(1.00000000000000))*(gconst15));
IkReal x101=((gconst1)*(gconst25));
IkReal x102=((gconst22)*(gconst24));
IkReal x103=((IkReal(1.00000000000000))*(gconst14));
IkReal x104=((gconst0)*(gconst25));
IkReal x105=((gconst2)*(gconst3));
IkReal x106=((gconst26)*(gconst30));
IkReal x107=((gconst31)*(gconst6));
IkReal x108=((IkReal(1.00000000000000))*(gconst10));
IkReal x109=((gconst1)*(gconst7));
IkReal x110=((gconst15)*(gconst6));
IkReal x111=((gconst2)*(gconst4));
IkReal x112=((gconst1)*(gconst15));
IkReal x113=((gconst18)*(gconst7));
IkReal x114=((gconst12)*(gconst16));
IkReal x115=((gconst5)*(gconst6));
IkReal x116=((gconst18)*(gconst27));
IkReal x117=((gconst12)*(gconst5));
IkReal x118=((gconst28)*(gconst9));
IkReal x119=((gconst21)*(gconst5));
IkReal x120=((gconst1)*(gconst5));
IkReal x121=((gconst10)*(gconst26));
IkReal x122=((gconst16)*(gconst31));
IkReal x123=((gconst14)*(gconst22));
IkReal x124=((gconst13)*(gconst14));
IkReal x125=((gconst11)*(gconst26));
IkReal x126=((gconst12)*(gconst15));
IkReal x127=((gconst20)*(gconst5));
IkReal x128=((gconst0)*(gconst15));
IkReal x129=((gconst13)*(gconst24));
IkReal x130=((gconst18)*(gconst8));
IkReal x131=((gconst21)*(gconst25));
IkReal x132=((gconst29)*(gconst7));
IkReal x133=((gconst10)*(gconst16));
IkReal x134=((gconst20)*(x122));
IkReal x135=((gconst0)*(x130));
IkReal x136=((gconst15)*(gconst21)*(gconst30));
IkReal x137=((gconst18)*(x103));
IkReal x138=((IkReal(1.00000000000000))*(gconst30)*(gconst6));
IkReal x139=((gconst30)*(x131));
IkReal x140=((IkReal(1.00000000000000))*(gconst16)*(gconst30));
op[0]=((((IkReal(-1.00000000000000))*(x102)*(x106)))+(((x106)*(x131)))+(((x74)*(x89)))+(((IkReal(-1.00000000000000))*(gconst20)*(x66)*(x89)))+(((IkReal(-1.00000000000000))*(x74)*(x86)))+(((IkReal(-1.00000000000000))*(gconst21)*(x64)*(x66)))+(((x102)*(x64)))+(((x71)*(x86))));
op[1]=((((x84)*(x86)))+(((x71)*(x95)))+(((x71)*(x91)))+(((x89)*(x97)))+(((IkReal(-1.00000000000000))*(gconst21)*(x116)*(x66)))+(((IkReal(-1.00000000000000))*(x84)*(x89)))+(((x122)*(x74)))+(((x86)*(x92)))+(((IkReal(-1.00000000000000))*(x86)*(x97)))+(((gconst16)*(x139)))+(((x129)*(x64)))+(((x102)*(x116)))+(((IkReal(-1.00000000000000))*(x102)*(x140)))+(((IkReal(-1.00000000000000))*(x134)*(x66)))+(((x67)*(x74)))+(((IkReal(-1.00000000000000))*(gconst12)*(x66)*(x89)))+(((IkReal(-1.00000000000000))*(gconst22)*(x103)*(x86)))+(((gconst15)*(gconst21)*(x106)))+(((IkReal(-1.00000000000000))*(x74)*(x91)))+(((IkReal(-1.00000000000000))*(x74)*(x95)))+(((IkReal(-1.00000000000000))*(gconst15)*(x64)*(x88)))+(((IkReal(-1.00000000000000))*(x106)*(x129)))+(((IkReal(-1.00000000000000))*(gconst20)*(x66)*(x67)))+(((x123)*(x89))));
op[2]=((((IkReal(-1.00000000000000))*(gconst1)*(x64)*(x66)))+(((IkReal(-1.00000000000000))*(gconst15)*(x116)*(x88)))+(((x121)*(x131)))+(((x71)*(x96)))+(((x89)*(x90)))+(((IkReal(-1.00000000000000))*(x95)*(x97)))+(((IkReal(-1.00000000000000))*(x70)*(x74)))+(((x92)*(x95)))+(((IkReal(-1.00000000000000))*(gconst22)*(x68)*(x86)))+(((x106)*(x119)))+(((x124)*(x89)))+(((IkReal(-1.00000000000000))*(x91)*(x97)))+(((x64)*(x99)))+(((x102)*(x132)))+(((IkReal(-1.00000000000000))*(gconst26)*(x102)*(x108)))+(((x107)*(x74)))+(((x123)*(x67)))+(((x85)*(x89)))+(((gconst16)*(x136)))+(((IkReal(-1.00000000000000))*(x129)*(x140)))+(((IkReal(-1.00000000000000))*(gconst20)*(x125)*(x66)))+(((x122)*(x123)))+(((IkReal(-1.00000000000000))*(gconst13)*(x103)*(x86)))+(((gconst6)*(x139)))+(((IkReal(-1.00000000000000))*(x118)*(x74)))+(((x118)*(x71)))+(((IkReal(-1.00000000000000))*(gconst12)*(x66)*(x67)))+(((IkReal(-1.00000000000000))*(x106)*(x99)))+(((x67)*(x97)))+(((IkReal(-1.00000000000000))*(x85)*(x86)))+(((IkReal(-1.00000000000000))*(gconst12)*(x100)*(x89)))+(((IkReal(-1.00000000000000))*(x122)*(x84)))+(((x125)*(x74)))+(((IkReal(-1.00000000000000))*(x106)*(x65)))+(((IkReal(-1.00000000000000))*(x74)*(x96)))+(((IkReal(-1.00000000000000))*(gconst22)*(x103)*(x95)))+(((IkReal(-1.00000000000000))*(gconst22)*(x103)*(x91)))+(((IkReal(-1.00000000000000))*(gconst21)*(x66)*(x76)))+(((x116)*(x129)))+(((IkReal(-1.00000000000000))*(gconst5)*(x64)*(x88)))+(((x127)*(x86)))+(((IkReal(-1.00000000000000))*(gconst20)*(x107)*(x66)))+(((IkReal(-1.00000000000000))*(gconst21)*(x132)*(x66)))+(((x70)*(x71)))+(((IkReal(-1.00000000000000))*(gconst20)*(x89)*(x93)))+(((IkReal(-1.00000000000000))*(x67)*(x84)))+(((IkReal(-1.00000000000000))*(gconst20)*(x66)*(x75)))+(((x122)*(x97)))+(((x64)*(x65)))+(((x74)*(x75)))+(((x104)*(x86)))+(((IkReal(-1.00000000000000))*(gconst0)*(x66)*(x89)))+(((x101)*(x106)))+(((x102)*(x76)))+(((IkReal(-1.00000000000000))*(x102)*(x138)))+(((x126)*(x86)))+(((IkReal(-1.00000000000000))*(gconst31)*(x114)*(x66)))+(((x84)*(x91)))+(((x84)*(x95)))+(((x91)*(x92))));
op[3]=((((IkReal(-1.00000000000000))*(gconst14)*(gconst2)*(gconst28)*(gconst29)))+(((IkReal(-1.00000000000000))*(gconst19)*(gconst20)*(gconst26)*(gconst5)))+(((gconst19)*(gconst2)*(gconst23)*(gconst26)))+(((gconst15)*(gconst21)*(gconst30)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst16)*(gconst20)*(gconst25)))+(((gconst16)*(gconst21)*(gconst30)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst19)*(gconst20)*(gconst25)*(gconst6)))+(((gconst0)*(gconst15)*(gconst28)*(gconst29)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst21)*(gconst27)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst26)*(gconst31)*(gconst5)))+(((gconst15)*(gconst20)*(gconst29)*(gconst8)))+(((gconst14)*(gconst2)*(gconst26)*(gconst31)))+(((IkReal(-1.00000000000000))*(gconst18)*(gconst22)*(gconst23)*(gconst8)))+(((gconst13)*(gconst24)*(gconst27)*(gconst9)))+(((gconst13)*(gconst24)*(gconst29)*(gconst7)))+(((gconst18)*(gconst22)*(gconst27)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst12)*(gconst25)*(gconst26)))+(((gconst17)*(gconst20)*(gconst25)*(gconst9)))+(((gconst12)*(gconst25)*(gconst29)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst18)*(gconst21)*(gconst27)*(gconst5)))+(((gconst18)*(gconst22)*(gconst24)*(gconst7)))+(((gconst18)*(gconst20)*(gconst25)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst17)*(gconst2)*(gconst23)*(gconst29)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst24)*(gconst30)*(gconst6)))+(((gconst11)*(gconst16)*(gconst22)*(gconst23)))+(((gconst13)*(gconst16)*(gconst19)*(gconst23)))+(((gconst12)*(gconst25)*(gconst28)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst15)*(gconst20)*(gconst26)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst25)*(gconst31)*(gconst6)))+(((gconst17)*(gconst20)*(gconst29)*(gconst5)))+(((gconst15)*(gconst20)*(gconst28)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst16)*(gconst19)*(gconst20)))+(((gconst13)*(gconst26)*(gconst3)*(gconst31)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst19)*(gconst25)*(gconst26)))+(((gconst18)*(gconst2)*(gconst24)*(gconst27)))+(((gconst10)*(gconst15)*(gconst21)*(gconst26)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst15)*(gconst27)*(gconst29)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst22)*(gconst30)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst18)*(gconst22)*(gconst28)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst16)*(gconst19)*(gconst25)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst16)*(gconst22)*(gconst24)))+(((gconst11)*(gconst13)*(gconst23)*(gconst26)))+(((IkReal(-1.00000000000000))*(gconst18)*(gconst2)*(gconst23)*(gconst28)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst14)*(gconst18)*(gconst28)))+(((gconst1)*(gconst15)*(gconst26)*(gconst30)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst15)*(gconst19)*(gconst26)))+(((IkReal(-1.00000000000000))*(gconst17)*(gconst22)*(gconst23)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst20)*(gconst31)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst18)*(gconst25)*(gconst27)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst17)*(gconst18)*(gconst23)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst21)*(gconst29)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst17)*(gconst18)*(gconst22)))+(((gconst1)*(gconst16)*(gconst25)*(gconst30)))+(((IkReal(-1.00000000000000))*(gconst18)*(gconst21)*(gconst25)*(gconst7)))+(((gconst12)*(gconst15)*(gconst18)*(gconst28)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst23)*(gconst28)*(gconst9)))+(((gconst13)*(gconst23)*(gconst31)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst23)*(gconst29)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst17)*(gconst22)*(gconst29)*(gconst3)))+(((gconst13)*(gconst27)*(gconst29)*(gconst4)))+(((gconst16)*(gconst22)*(gconst3)*(gconst31)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst20)*(gconst31)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst14)*(gconst17)*(gconst29)))+(((gconst19)*(gconst22)*(gconst23)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst15)*(gconst16)*(gconst31)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst26)*(gconst30)*(gconst4)))+(((gconst0)*(gconst17)*(gconst25)*(gconst29)))+(((gconst16)*(gconst2)*(gconst23)*(gconst31)))+(((gconst12)*(gconst28)*(gconst29)*(gconst5)))+(((gconst15)*(gconst17)*(gconst18)*(gconst20)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst16)*(gconst25)*(gconst31)))+(((gconst13)*(gconst14)*(gconst16)*(gconst31)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst13)*(gconst24)*(gconst26)))+(((gconst13)*(gconst14)*(gconst19)*(gconst26)))+(((gconst18)*(gconst20)*(gconst28)*(gconst5)))+(((gconst11)*(gconst14)*(gconst22)*(gconst26)))+(((gconst12)*(gconst17)*(gconst18)*(gconst25)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst28)*(gconst29)*(gconst3)))+(((gconst10)*(gconst16)*(gconst21)*(gconst25)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst22)*(gconst28)*(gconst9)))+(((gconst12)*(gconst15)*(gconst17)*(gconst29)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst2)*(gconst24)*(gconst30)))+(((gconst14)*(gconst22)*(gconst31)*(gconst6)))+(((gconst19)*(gconst22)*(gconst26)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst22)*(gconst29)*(gconst8)))+(((gconst0)*(gconst18)*(gconst25)*(gconst28)))+(((gconst14)*(gconst16)*(gconst19)*(gconst22)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst15)*(gconst26)*(gconst31))));
op[4]=((((gconst0)*(gconst25)*(gconst28)*(gconst9)))+(((gconst11)*(gconst13)*(gconst16)*(gconst23)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst13)*(gconst16)*(gconst24)))+(((gconst11)*(gconst22)*(gconst26)*(gconst3)))+(((gconst1)*(gconst10)*(gconst25)*(gconst26)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst15)*(gconst18)*(gconst27)))+(((gconst16)*(gconst19)*(gconst2)*(gconst23)))+(((gconst2)*(gconst27)*(gconst29)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst18)*(gconst2)*(gconst28)))+(((gconst11)*(gconst22)*(gconst23)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst2)*(gconst28)*(gconst29)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst19)*(gconst20)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst16)*(gconst30)*(gconst4)))+(((gconst1)*(gconst25)*(gconst30)*(gconst6)))+(((gconst0)*(gconst28)*(gconst29)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst18)*(gconst28)*(gconst3)))+(((gconst20)*(gconst28)*(gconst5)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst19)*(gconst26)*(gconst5)))+(((gconst21)*(gconst30)*(gconst5)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst11)*(gconst25)*(gconst26)))+(((gconst14)*(gconst19)*(gconst22)*(gconst6)))+(((gconst13)*(gconst19)*(gconst26)*(gconst3)))+(((gconst0)*(gconst15)*(gconst18)*(gconst28)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst20)*(gconst25)*(gconst6)))+(((gconst0)*(gconst25)*(gconst29)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst2)*(gconst26)*(gconst30)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst22)*(gconst24)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst17)*(gconst22)*(gconst9)))+(((gconst17)*(gconst18)*(gconst20)*(gconst5)))+(((gconst1)*(gconst26)*(gconst30)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst18)*(gconst21)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst17)*(gconst18)*(gconst2)*(gconst23)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst19)*(gconst20)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst19)*(gconst25)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst2)*(gconst24)*(gconst30)*(gconst6)))+(((gconst15)*(gconst18)*(gconst20)*(gconst8)))+(((gconst13)*(gconst18)*(gconst27)*(gconst4)))+(((gconst22)*(gconst24)*(gconst7)*(gconst9)))+(((gconst22)*(gconst27)*(gconst4)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst25)*(gconst31)*(gconst6)))+(((gconst1)*(gconst15)*(gconst16)*(gconst30)))+(((gconst2)*(gconst23)*(gconst31)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst21)*(gconst29)*(gconst5)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst27)*(gconst29)*(gconst5)))+(((gconst14)*(gconst16)*(gconst2)*(gconst31)))+(((IkReal(-1.00000000000000))*(gconst20)*(gconst31)*(gconst5)*(gconst6)))+(((gconst22)*(gconst29)*(gconst4)*(gconst7)))+(((gconst20)*(gconst25)*(gconst8)*(gconst9)))+(((gconst15)*(gconst17)*(gconst20)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst25)*(gconst27)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst15)*(gconst19)*(gconst26)))+(((gconst2)*(gconst24)*(gconst29)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst18)*(gconst22)*(gconst8)))+(((gconst14)*(gconst19)*(gconst2)*(gconst26)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst16)*(gconst19)*(gconst25)))+(((IkReal(-1.00000000000000))*(gconst22)*(gconst23)*(gconst8)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst14)*(gconst29)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst26)*(gconst31)*(gconst5)))+(((gconst13)*(gconst16)*(gconst3)*(gconst31)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst12)*(gconst15)*(gconst26)))+(((IkReal(-1.00000000000000))*(gconst17)*(gconst18)*(gconst22)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst21)*(gconst25)*(gconst7)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst22)*(gconst26)*(gconst4)))+(((gconst0)*(gconst17)*(gconst18)*(gconst25)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst18)*(gconst23)*(gconst8)))+(((gconst11)*(gconst14)*(gconst16)*(gconst22)))+(((IkReal(-1.00000000000000))*(gconst22)*(gconst28)*(gconst3)*(gconst9)))+(((gconst16)*(gconst19)*(gconst22)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst17)*(gconst2)*(gconst29)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst14)*(gconst28)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst15)*(gconst31)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst15)*(gconst16)*(gconst19)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst15)*(gconst16)*(gconst20)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst12)*(gconst16)*(gconst25)))+(((gconst20)*(gconst29)*(gconst5)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst17)*(gconst23)*(gconst9)))+(((gconst2)*(gconst26)*(gconst3)*(gconst31)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst14)*(gconst17)*(gconst18)))+(((IkReal(-1.00000000000000))*(gconst22)*(gconst29)*(gconst3)*(gconst8)))+(((gconst11)*(gconst2)*(gconst23)*(gconst26)))+(((gconst10)*(gconst21)*(gconst25)*(gconst6)))+(((gconst10)*(gconst15)*(gconst16)*(gconst21)))+(((gconst10)*(gconst21)*(gconst26)*(gconst5)))+(((gconst13)*(gconst19)*(gconst23)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst2)*(gconst23)*(gconst29)*(gconst8)))+(((gconst2)*(gconst24)*(gconst27)*(gconst9)))+(((gconst13)*(gconst14)*(gconst31)*(gconst6)))+(((gconst12)*(gconst18)*(gconst25)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst15)*(gconst16)*(gconst31)))+(((IkReal(-1.00000000000000))*(gconst21)*(gconst27)*(gconst5)*(gconst9)))+(((gconst0)*(gconst15)*(gconst17)*(gconst29)))+(((gconst11)*(gconst13)*(gconst14)*(gconst26)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst2)*(gconst24)*(gconst26)))+(((gconst12)*(gconst15)*(gconst17)*(gconst18)))+(((gconst12)*(gconst18)*(gconst28)*(gconst5)))+(((gconst12)*(gconst17)*(gconst29)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst2)*(gconst23)*(gconst28)*(gconst9)))+(((gconst12)*(gconst15)*(gconst29)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst22)*(gconst30)*(gconst4)*(gconst6)))+(((gconst12)*(gconst15)*(gconst28)*(gconst9)))+(((gconst12)*(gconst17)*(gconst25)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst20)*(gconst26)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst16)*(gconst31)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst17)*(gconst29)*(gconst3)))+(((gconst22)*(gconst3)*(gconst31)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst25)*(gconst29)*(gconst7)))+(((gconst13)*(gconst18)*(gconst24)*(gconst7)))+(((gconst13)*(gconst14)*(gconst16)*(gconst19))));
op[5]=((((IkReal(-1.00000000000000))*(gconst13)*(gconst30)*(gconst4)*(gconst6)))+(((gconst12)*(gconst25)*(gconst8)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst17)*(gconst18)*(gconst3)))+(((gconst13)*(gconst29)*(gconst4)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst17)*(gconst2)*(gconst23)*(gconst9)))+(((gconst1)*(gconst15)*(gconst30)*(gconst6)))+(((gconst11)*(gconst14)*(gconst22)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst16)*(gconst2)*(gconst24)))+(((gconst11)*(gconst13)*(gconst23)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst14)*(gconst17)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst18)*(gconst25)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst13)*(gconst26)*(gconst4)))+(((gconst18)*(gconst2)*(gconst24)*(gconst7)))+(((gconst14)*(gconst2)*(gconst31)*(gconst6)))+(((gconst19)*(gconst22)*(gconst3)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst31)*(gconst5)*(gconst6)))+(((gconst12)*(gconst17)*(gconst18)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst28)*(gconst3)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst16)*(gconst19)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst19)*(gconst25)*(gconst6)))+(((gconst16)*(gconst2)*(gconst3)*(gconst31)))+(((gconst1)*(gconst16)*(gconst30)*(gconst5)))+(((gconst13)*(gconst14)*(gconst19)*(gconst6)))+(((gconst10)*(gconst15)*(gconst21)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst19)*(gconst26)*(gconst5)))+(((gconst11)*(gconst16)*(gconst2)*(gconst23)))+(((gconst11)*(gconst14)*(gconst2)*(gconst26)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst14)*(gconst18)*(gconst8)))+(((gconst0)*(gconst18)*(gconst25)*(gconst8)))+(((gconst10)*(gconst16)*(gconst21)*(gconst5)))+(((gconst0)*(gconst17)*(gconst29)*(gconst5)))+(((gconst1)*(gconst10)*(gconst16)*(gconst25)))+(((IkReal(-1.00000000000000))*(gconst17)*(gconst22)*(gconst3)*(gconst9)))+(((gconst19)*(gconst2)*(gconst23)*(gconst6)))+(((gconst17)*(gconst20)*(gconst5)*(gconst9)))+(((gconst0)*(gconst18)*(gconst28)*(gconst5)))+(((gconst18)*(gconst2)*(gconst27)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst29)*(gconst3)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst15)*(gconst20)*(gconst6)))+(((gconst13)*(gconst24)*(gconst7)*(gconst9)))+(((gconst13)*(gconst16)*(gconst19)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst23)*(gconst8)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst18)*(gconst2)*(gconst23)*(gconst8)))+(((gconst12)*(gconst15)*(gconst18)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst11)*(gconst16)*(gconst25)))+(((gconst12)*(gconst29)*(gconst5)*(gconst8)))+(((gconst18)*(gconst20)*(gconst5)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst18)*(gconst21)*(gconst5)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst2)*(gconst29)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst16)*(gconst20)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst12)*(gconst15)*(gconst16)))+(((gconst13)*(gconst3)*(gconst31)*(gconst6)))+(((gconst11)*(gconst13)*(gconst26)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst12)*(gconst26)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst18)*(gconst2)*(gconst28)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst18)*(gconst27)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst15)*(gconst27)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst2)*(gconst28)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst17)*(gconst18)*(gconst2)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst12)*(gconst25)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst15)*(gconst16)*(gconst19)))+(((gconst12)*(gconst15)*(gconst17)*(gconst9)))+(((gconst15)*(gconst20)*(gconst8)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst18)*(gconst22)*(gconst3)*(gconst8)))+(((gconst12)*(gconst28)*(gconst5)*(gconst9)))+(((gconst11)*(gconst16)*(gconst22)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst13)*(gconst24)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst17)*(gconst2)*(gconst29)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst11)*(gconst15)*(gconst26)))+(((gconst13)*(gconst27)*(gconst4)*(gconst9)))+(((gconst19)*(gconst2)*(gconst26)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst19)*(gconst20)*(gconst5)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst15)*(gconst29)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst16)*(gconst22)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst22)*(gconst8)*(gconst9)))+(((gconst11)*(gconst13)*(gconst14)*(gconst16)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst21)*(gconst7)*(gconst9)))+(((gconst18)*(gconst22)*(gconst4)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst2)*(gconst30)*(gconst4)))+(((gconst0)*(gconst15)*(gconst28)*(gconst9)))+(((gconst14)*(gconst16)*(gconst19)*(gconst2)))+(((gconst0)*(gconst15)*(gconst17)*(gconst18)))+(((gconst0)*(gconst15)*(gconst29)*(gconst8)))+(((gconst1)*(gconst10)*(gconst15)*(gconst26)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst16)*(gconst31)*(gconst5)))+(((gconst0)*(gconst17)*(gconst25)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst15)*(gconst19)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst15)*(gconst31)*(gconst6))));
op[6]=((((x111)*(x132)))+(((IkReal(-1.00000000000000))*(gconst26)*(x108)*(x111)))+(((x112)*(x133)))+(((IkReal(-1.00000000000000))*(x65)*(x98)))+(((x77)*(x85)))+(((x113)*(x83)))+(((x111)*(x76)))+(((IkReal(-1.00000000000000))*(x98)*(x99)))+(((x104)*(x69)))+(((x117)*(x130)))+(((IkReal(-1.00000000000000))*(gconst2)*(x68)*(x70)))+(((x82)*(x99)))+(((IkReal(-1.00000000000000))*(gconst5)*(x114)*(x73)))+(((x117)*(x87)))+(((IkReal(-1.00000000000000))*(gconst22)*(x68)*(x69)))+(((IkReal(-1.00000000000000))*(gconst12)*(x93)*(x94)))+(((IkReal(-1.00000000000000))*(x137)*(x79)))+(((IkReal(-1.00000000000000))*(x111)*(x138)))+(((x78)*(x81)))+(((IkReal(-1.00000000000000))*(gconst16)*(x128)*(x73)))+(((IkReal(-1.00000000000000))*(gconst29)*(x109)*(x93)))+(((IkReal(-1.00000000000000))*(gconst18)*(x100)*(x109)))+(((x78)*(x94)))+(((x101)*(x98)))+(((IkReal(-1.00000000000000))*(x80)*(x87)))+(((x126)*(x69)))+(((x65)*(x82)))+(((IkReal(-1.00000000000000))*(gconst2)*(x118)*(x68)))+(((IkReal(-1.00000000000000))*(gconst1)*(x66)*(x82)))+(((IkReal(-1.00000000000000))*(gconst13)*(x68)*(x87)))+(((IkReal(-1.00000000000000))*(gconst1)*(x76)*(x93)))+(((x72)*(x96)))+(((IkReal(-1.00000000000000))*(gconst13)*(x103)*(x69)))+(((x105)*(x75)))+(((IkReal(-1.00000000000000))*(gconst20)*(x115)*(x73)))+(((IkReal(-1.00000000000000))*(x107)*(x72)))+(((IkReal(-1.00000000000000))*(gconst0)*(x100)*(x94)))+(((IkReal(-1.00000000000000))*(gconst5)*(x82)*(x88)))+(((x118)*(x72)))+(((x120)*(x121)))+(((IkReal(-1.00000000000000))*(gconst29)*(x68)*(x79)))+(((x119)*(x98)))+(((IkReal(-1.00000000000000))*(gconst16)*(x108)*(x83)))+(((x105)*(x125)))+(((IkReal(-1.00000000000000))*(x69)*(x85)))+(((gconst1)*(gconst30)*(x115)))+(((x124)*(x77)))+(((x127)*(x69)))+(((x105)*(x107)))+(((x80)*(x81)))+(((IkReal(-1.00000000000000))*(x72)*(x75)))+(((IkReal(-1.00000000000000))*(gconst13)*(x130)*(x68)))+(((x128)*(x130)))+(((x128)*(x87)))+(((x70)*(x72)))+(((x80)*(x94)))+(((IkReal(-1.00000000000000))*(gconst12)*(x110)*(x73)))+(((IkReal(-1.00000000000000))*(gconst26)*(x72)*(x73)))+(((x77)*(x90)))+(((IkReal(-1.00000000000000))*(gconst0)*(x66)*(x77))));
op[7]=((((IkReal(-1.00000000000000))*(gconst1)*(x100)*(x82)))+(((x77)*(x80)))+(((IkReal(-1.00000000000000))*(gconst13)*(x68)*(x69)))+(((x111)*(x113)))+(((x82)*(x83)))+(((IkReal(-1.00000000000000))*(gconst16)*(x108)*(x111)))+(((x72)*(x87)))+(((IkReal(-1.00000000000000))*(x72)*(x94)))+(((IkReal(-1.00000000000000))*(gconst18)*(x68)*(x79)))+(((x130)*(x72)))+(((IkReal(-1.00000000000000))*(gconst18)*(x109)*(x93)))+(((IkReal(-1.00000000000000))*(gconst2)*(x68)*(x87)))+(((x128)*(x69)))+(((x120)*(x133)))+(((IkReal(-1.00000000000000))*(gconst0)*(x110)*(x73)))+(((IkReal(-1.00000000000000))*(x69)*(x80)))+(((x112)*(x98)))+(((IkReal(-1.00000000000000))*(x83)*(x98)))+(((IkReal(-1.00000000000000))*(gconst12)*(x115)*(x73)))+(((IkReal(-1.00000000000000))*(gconst16)*(x72)*(x73)))+(((x117)*(x69)))+(((x105)*(x94)))+(((x77)*(x78)))+(((x105)*(x81))));
op[8]=((((IkReal(-1.00000000000000))*(gconst1)*(x82)*(x93)))+(((x105)*(x77)))+(((x69)*(x72)))+(((IkReal(-1.00000000000000))*(gconst2)*(x68)*(x69)))+(((x111)*(x82)))+(((IkReal(-1.00000000000000))*(gconst6)*(x72)*(x73)))+(((x120)*(x98)))+(((IkReal(-1.00000000000000))*(x111)*(x98))));
polyroots8(op,zeror,numroots);
IkReal j25array[8], cj25array[8], sj25array[8], tempj25array[1];
int numsolutions = 0;
for(int ij25 = 0; ij25 < numroots; ++ij25)
{
IkReal htj25 = zeror[ij25];
tempj25array[0]=((IkReal(2.00000000000000))*(atan(htj25)));
for(int kj25 = 0; kj25 < 1; ++kj25)
{
j25array[numsolutions] = tempj25array[kj25];
if( j25array[numsolutions] > IKPI )
{
    j25array[numsolutions]-=IK2PI;
}
else if( j25array[numsolutions] < -IKPI )
{
    j25array[numsolutions]+=IK2PI;
}
sj25array[numsolutions] = IKsin(j25array[numsolutions]);
cj25array[numsolutions] = IKcos(j25array[numsolutions]);
numsolutions++;
}
}
bool j25valid[8]={true,true,true,true,true,true,true,true};
_nj25 = 8;
for(int ij25 = 0; ij25 < numsolutions; ++ij25)
    {
if( !j25valid[ij25] )
{
    continue;
}
    j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];
htj25 = IKtan(j25/2);

_ij25[0] = ij25; _ij25[1] = -1;
for(int iij25 = ij25+1; iij25 < numsolutions; ++iij25)
{
if( j25valid[iij25] && IKabs(cj25array[ij25]-cj25array[iij25]) < IKFAST_SOLUTION_THRESH && IKabs(sj25array[ij25]-sj25array[iij25]) < IKFAST_SOLUTION_THRESH )
{
    j25valid[iij25]=false; _ij25[1] = iij25; break; 
}
}
{
IkReal dummyeval[1];
IkReal gconst48;
gconst48=IKsign(((((IkReal(173.000000000000))*((npy)*(npy))))+(((IkReal(173.000000000000))*((npx)*(npx))))));
dummyeval[0]=(((npx)*(npx))+((npy)*(npy)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(8.27649086427837))*(sj25)))+(((IkReal(1.00013642192573))*(cj25))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14160913663703))+(j25)), IkReal(6.28318530717959))));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst57;
gconst57=IKsign(((((IkReal(168945312500000.))*((npy)*(npy))))+(((IkReal(168945312500000.))*((npx)*(npx))))));
dummyeval[0]=(((npx)*(npx))+((npy)*(npy)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal j26array[2], cj26array[2], sj26array[2];
bool j26valid[2]={false};
_nj26 = 2;
sj26array[0]=((IkReal(-1793400286.94405))*(npz));
if( sj26array[0] >= -1-IKFAST_SINCOS_THRESH && sj26array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j26valid[0] = j26valid[1] = true;
    j26array[0] = IKasin(sj26array[0]);
    cj26array[0] = IKcos(j26array[0]);
    sj26array[1] = sj26array[0];
    j26array[1] = j26array[0] > 0 ? (IKPI-j26array[0]) : (-IKPI-j26array[0]);
    cj26array[1] = -cj26array[0];
}
else if( isnan(sj26array[0]) )
{
    // probably any value will work
    j26valid[0] = true;
    cj26array[0] = 1; sj26array[0] = 0; j26array[0] = 0;
}
for(int ij26 = 0; ij26 < 2; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 2; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];

{
IkReal dummyeval[1];
IkReal gconst58;
gconst58=IKsign(((((IkReal(976562500000.000))*((npx)*(npx))))+(((IkReal(976562500000.000))*((npy)*(npy))))));
dummyeval[0]=(((npx)*(npx))+((npy)*(npy)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst59;
gconst59=IKsign(((((IkReal(168945312500000.))*((npy)*(npy))))+(((IkReal(168945312500000.))*((npx)*(npx))))));
dummyeval[0]=(((npx)*(npx))+((npy)*(npy)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j27array[1], cj27array[1], sj27array[1];
bool j27valid[1]={false};
_nj27 = 1;
IkReal x141=((IkReal(4.88281250000000e+19))*(pp));
if( IKabs(((gconst59)*(((((IkReal(5.84426992913683e+18))*(npy)))+(((IkReal(-1.00000000000000))*(npy)*(x141)))+(((IkReal(58448888383431.0))*(npx))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst59)*(((((IkReal(-5.84426992913683e+18))*(npx)))+(((npx)*(x141)))+(((IkReal(58448888383431.0))*(npy))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j27array[0]=IKatan2(((gconst59)*(((((IkReal(5.84426992913683e+18))*(npy)))+(((IkReal(-1.00000000000000))*(npy)*(x141)))+(((IkReal(58448888383431.0))*(npx)))))), ((gconst59)*(((((IkReal(-5.84426992913683e+18))*(npx)))+(((npx)*(x141)))+(((IkReal(58448888383431.0))*(npy)))))));
sj27array[0]=IKsin(j27array[0]);
cj27array[0]=IKcos(j27array[0]);
if( j27array[0] > IKPI )
{
    j27array[0]-=IK2PI;
}
else if( j27array[0] < -IKPI )
{    j27array[0]+=IK2PI;
}
j27valid[0] = true;
for(int ij27 = 0; ij27 < 1; ++ij27)
{
if( !j27valid[ij27] )
{
    continue;
}
_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < 1; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break; 
}
}
j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
{
IkReal evalcond[6];
IkReal x142=IKcos(j27);
IkReal x143=IKsin(j27);
IkReal x144=((IkReal(1.00000000000000))*(pp));
IkReal x145=((IkReal(0.0439812000000000))*(cj26));
IkReal x146=((npz)*(sj26));
IkReal x147=((npx)*(x142));
IkReal x148=((npy)*(x142));
IkReal x149=((npy)*(x143));
IkReal x150=((npx)*(x143));
IkReal x151=((IkReal(3.46000000000000e-6))*(x147));
IkReal x152=((IkReal(3.46000000000000e-6))*(x149));
IkReal x153=((IkReal(1.00000000000000))*(x149));
IkReal x154=((x152)+(x144));
evalcond[0]=((IkReal(-0.345963362454528))+(x150)+(x148));
evalcond[1]=((IkReal(0.119690648148722))+(((IkReal(-1.00000000000000))*(x154)))+(x151));
evalcond[2]=((((cj26)*(npz)))+(((IkReal(-1.73000000000000e-6))*(sj26)))+(((IkReal(-1.00000000000000))*(sj26)*(x153)))+(((sj26)*(x147))));
evalcond[3]=((IkReal(-1.73000000000000e-6))+(((IkReal(-1.00000000000000))*(x153)))+(x147)+(((IkReal(-5.57600000000000e-10))*(cj26))));
evalcond[4]=((IkReal(-5.57600000000000e-10))+(((cj26)*(x147)))+(((IkReal(-1.00000000000000))*(cj26)*(x153)))+(((IkReal(-1.00000000000000))*(x146)))+(((IkReal(-1.73000000000000e-6))*(cj26))));
evalcond[5]=((IkReal(0.00624372621060710))+(((IkReal(-1.00000000000000))*(x154)))+(((x145)*(x149)))+(x151)+(((IkReal(0.0439812000000000))*(x146)))+(((IkReal(7.60874760000000e-8))*(cj26)))+(((IkReal(-1.00000000000000))*(x145)*(x147)))+(((IkReal(0.327916000000000))*(x150)))+(((IkReal(0.327916000000000))*(x148))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j27array[1], cj27array[1], sj27array[1];
bool j27valid[1]={false};
_nj27 = 1;
IkReal x337=((IkReal(544.531250000000))*(cj26));
if( IKabs(((gconst58)*(((((IkReal(-1689453.12500000))*(npy)))+(((IkReal(-1.00000000000000))*(npy)*(x337)))+(((IkReal(337854846147.000))*(npx))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst58)*(((((IkReal(1689453.12500000))*(npx)))+(((npx)*(x337)))+(((IkReal(337854846147.000))*(npy))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j27array[0]=IKatan2(((gconst58)*(((((IkReal(-1689453.12500000))*(npy)))+(((IkReal(-1.00000000000000))*(npy)*(x337)))+(((IkReal(337854846147.000))*(npx)))))), ((gconst58)*(((((IkReal(1689453.12500000))*(npx)))+(((npx)*(x337)))+(((IkReal(337854846147.000))*(npy)))))));
sj27array[0]=IKsin(j27array[0]);
cj27array[0]=IKcos(j27array[0]);
if( j27array[0] > IKPI )
{
    j27array[0]-=IK2PI;
}
else if( j27array[0] < -IKPI )
{    j27array[0]+=IK2PI;
}
j27valid[0] = true;
for(int ij27 = 0; ij27 < 1; ++ij27)
{
if( !j27valid[ij27] )
{
    continue;
}
_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < 1; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break; 
}
}
j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
{
IkReal evalcond[6];
IkReal x338=IKcos(j27);
IkReal x339=IKsin(j27);
IkReal x340=((IkReal(1.00000000000000))*(pp));
IkReal x341=((IkReal(0.0439812000000000))*(cj26));
IkReal x342=((npz)*(sj26));
IkReal x343=((npx)*(x338));
IkReal x344=((npy)*(x338));
IkReal x345=((npy)*(x339));
IkReal x346=((npx)*(x339));
IkReal x347=((IkReal(3.46000000000000e-6))*(x343));
IkReal x348=((IkReal(3.46000000000000e-6))*(x345));
IkReal x349=((IkReal(1.00000000000000))*(x345));
IkReal x350=((x340)+(x348));
evalcond[0]=((IkReal(-0.345963362454528))+(x346)+(x344));
evalcond[1]=((IkReal(0.119690648148722))+(((IkReal(-1.00000000000000))*(x350)))+(x347));
evalcond[2]=((((cj26)*(npz)))+(((sj26)*(x343)))+(((IkReal(-1.00000000000000))*(sj26)*(x349)))+(((IkReal(-1.73000000000000e-6))*(sj26))));
evalcond[3]=((IkReal(-1.73000000000000e-6))+(x343)+(((IkReal(-1.00000000000000))*(x349)))+(((IkReal(-5.57600000000000e-10))*(cj26))));
evalcond[4]=((IkReal(-5.57600000000000e-10))+(((IkReal(-1.00000000000000))*(cj26)*(x349)))+(((IkReal(-1.73000000000000e-6))*(cj26)))+(((cj26)*(x343)))+(((IkReal(-1.00000000000000))*(x342))));
evalcond[5]=((IkReal(0.00624372621060710))+(((IkReal(-1.00000000000000))*(x350)))+(((IkReal(7.60874760000000e-8))*(cj26)))+(x347)+(((IkReal(0.0439812000000000))*(x342)))+(((x341)*(x345)))+(((IkReal(-1.00000000000000))*(x341)*(x343)))+(((IkReal(0.327916000000000))*(x344)))+(((IkReal(0.327916000000000))*(x346))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

} else
{
{
IkReal j27array[1], cj27array[1], sj27array[1];
bool j27valid[1]={false};
_nj27 = 1;
IkReal x351=((IkReal(4.88281250000000e+19))*(pp));
if( IKabs(((gconst57)*(((((IkReal(-1.00000000000000))*(npy)*(x351)))+(((IkReal(5.84426992913683e+18))*(npy)))+(((IkReal(58448888383431.0))*(npx))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst57)*(((((npx)*(x351)))+(((IkReal(-5.84426992913683e+18))*(npx)))+(((IkReal(58448888383431.0))*(npy))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j27array[0]=IKatan2(((gconst57)*(((((IkReal(-1.00000000000000))*(npy)*(x351)))+(((IkReal(5.84426992913683e+18))*(npy)))+(((IkReal(58448888383431.0))*(npx)))))), ((gconst57)*(((((npx)*(x351)))+(((IkReal(-5.84426992913683e+18))*(npx)))+(((IkReal(58448888383431.0))*(npy)))))));
sj27array[0]=IKsin(j27array[0]);
cj27array[0]=IKcos(j27array[0]);
if( j27array[0] > IKPI )
{
    j27array[0]-=IK2PI;
}
else if( j27array[0] < -IKPI )
{    j27array[0]+=IK2PI;
}
j27valid[0] = true;
for(int ij27 = 0; ij27 < 1; ++ij27)
{
if( !j27valid[ij27] )
{
    continue;
}
_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < 1; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break; 
}
}
j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
{
IkReal evalcond[2];
IkReal x352=IKcos(j27);
IkReal x353=IKsin(j27);
evalcond[0]=((IkReal(-0.345963362454528))+(((npx)*(x353)))+(((npy)*(x352))));
evalcond[1]=((IkReal(0.119690648148722))+(((IkReal(-3.46000000000000e-6))*(npy)*(x353)))+(((IkReal(3.46000000000000e-6))*(npx)*(x352)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
if( IKabs(((IkReal(-1793400286.94405))*(npz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-3102.58249641320))+(((IkReal(1793400286.94405))*(cj27)*(npx)))+(((IkReal(-1793400286.94405))*(npy)*(sj27))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1793400286.94405))*(npz)))+IKsqr(((IkReal(-3102.58249641320))+(((IkReal(1793400286.94405))*(cj27)*(npx)))+(((IkReal(-1793400286.94405))*(npy)*(sj27)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j26array[0]=IKatan2(((IkReal(-1793400286.94405))*(npz)), ((IkReal(-3102.58249641320))+(((IkReal(1793400286.94405))*(cj27)*(npx)))+(((IkReal(-1793400286.94405))*(npy)*(sj27)))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[5];
IkReal x354=IKsin(j26);
IkReal x355=IKcos(j26);
IkReal x356=((cj27)*(npx));
IkReal x357=((npy)*(sj27));
IkReal x358=((IkReal(1.00000000000000))*(x357));
IkReal x359=((IkReal(0.0439812000000000))*(x355));
IkReal x360=((npz)*(x354));
evalcond[0]=((npz)+(((IkReal(5.57600000000000e-10))*(x354))));
evalcond[1]=((((IkReal(-1.73000000000000e-6))*(x354)))+(((x354)*(x356)))+(((IkReal(-1.00000000000000))*(x354)*(x358)))+(((npz)*(x355))));
evalcond[2]=((IkReal(-1.73000000000000e-6))+(((IkReal(-1.00000000000000))*(x358)))+(x356)+(((IkReal(-5.57600000000000e-10))*(x355))));
evalcond[3]=((IkReal(-5.57600000000000e-10))+(((IkReal(-1.00000000000000))*(x360)))+(((IkReal(-1.73000000000000e-6))*(x355)))+(((x355)*(x356)))+(((IkReal(-1.00000000000000))*(x355)*(x358))));
evalcond[4]=((IkReal(0.00624372621060710))+(((IkReal(7.60874760000000e-8))*(x355)))+(((IkReal(0.327916000000000))*(npx)*(sj27)))+(((IkReal(0.327916000000000))*(cj27)*(npy)))+(((IkReal(-1.00000000000000))*(x356)*(x359)))+(((IkReal(3.46000000000000e-6))*(x356)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-3.46000000000000e-6))*(x357)))+(((IkReal(0.0439812000000000))*(x360)))+(((x357)*(x359))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}
}
}

}

}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(0.240498609655184))+(j25)), IkReal(6.28318530717959))));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst60;
gconst60=IKsign(((((IkReal(173.000000000000))*((npy)*(npy))))+(((IkReal(173.000000000000))*((npx)*(npx))))));
dummyeval[0]=(((npx)*(npx))+((npy)*(npy)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal j26array[2], cj26array[2], sj26array[2];
bool j26valid[2]={false};
_nj26 = 2;
sj26array[0]=((IkReal(-1174629682.22056))*(npz));
if( sj26array[0] >= -1-IKFAST_SINCOS_THRESH && sj26array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j26valid[0] = j26valid[1] = true;
    j26array[0] = IKasin(sj26array[0]);
    cj26array[0] = IKcos(j26array[0]);
    sj26array[1] = sj26array[0];
    j26array[1] = j26array[0] > 0 ? (IKPI-j26array[0]) : (-IKPI-j26array[0]);
    cj26array[1] = -cj26array[0];
}
else if( isnan(sj26array[0]) )
{
    // probably any value will work
    j26valid[0] = true;
    cj26array[0] = 1; sj26array[0] = 0; j26array[0] = 0;
}
for(int ij26 = 0; ij26 < 2; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 2; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];

{
IkReal dummyeval[1];
IkReal gconst61;
gconst61=IKsign((((npx)*(npx))+((npy)*(npy))));
dummyeval[0]=(((npx)*(npx))+((npy)*(npy)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst62;
gconst62=IKsign(((((IkReal(173.000000000000))*((npy)*(npy))))+(((IkReal(173.000000000000))*((npx)*(npx))))));
dummyeval[0]=(((npx)*(npx))+((npy)*(npy)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j27array[1], cj27array[1], sj27array[1];
bool j27valid[1]={false};
_nj27 = 1;
IkReal x361=((IkReal(50000000.0000000))*(pp));
if( IKabs(((gconst62)*(((((IkReal(16285.3616847828))*(npy)))+(((IkReal(-3.12219372195351))*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(x361))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst62)*(((((IkReal(-16285.3616847828))*(npx)))+(((npx)*(x361)))+(((IkReal(-3.12219372195351))*(npy))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j27array[0]=IKatan2(((gconst62)*(((((IkReal(16285.3616847828))*(npy)))+(((IkReal(-3.12219372195351))*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(x361)))))), ((gconst62)*(((((IkReal(-16285.3616847828))*(npx)))+(((npx)*(x361)))+(((IkReal(-3.12219372195351))*(npy)))))));
sj27array[0]=IKsin(j27array[0]);
cj27array[0]=IKcos(j27array[0]);
if( j27array[0] > IKPI )
{
    j27array[0]-=IK2PI;
}
else if( j27array[0] < -IKPI )
{    j27array[0]+=IK2PI;
}
j27valid[0] = true;
for(int ij27 = 0; ij27 < 1; ++ij27)
{
if( !j27valid[ij27] )
{
    continue;
}
_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < 1; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break; 
}
}
j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
{
IkReal evalcond[6];
IkReal x362=IKcos(j27);
IkReal x363=IKsin(j27);
IkReal x364=((IkReal(1.00000000000000))*(pp));
IkReal x365=((IkReal(0.0439812000000000))*(cj26));
IkReal x366=((npz)*(sj26));
IkReal x367=((npx)*(x362));
IkReal x368=((npy)*(x362));
IkReal x369=((npy)*(x363));
IkReal x370=((npx)*(x363));
IkReal x371=((IkReal(3.46000000000000e-6))*(x367));
IkReal x372=((IkReal(3.46000000000000e-6))*(x369));
IkReal x373=((IkReal(1.00000000000000))*(x369));
IkReal x374=((x372)+(x364));
evalcond[0]=((IkReal(0.0180473625546446))+(x370)+(x368));
evalcond[1]=((IkReal(0.000325707233695655))+(((IkReal(-1.00000000000000))*(x374)))+(x371));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj26)*(x373)))+(((cj26)*(npz)))+(((sj26)*(x367)))+(((IkReal(-1.73000000000000e-6))*(sj26))));
evalcond[3]=((IkReal(-1.73000000000000e-6))+(((IkReal(-8.51332139087077e-10))*(cj26)))+(((IkReal(-1.00000000000000))*(x373)))+(x367));
evalcond[4]=((IkReal(-8.51332139087077e-10))+(((IkReal(-1.00000000000000))*(x366)))+(((cj26)*(x367)))+(((IkReal(-1.00000000000000))*(cj26)*(x373)))+(((IkReal(-1.73000000000000e-6))*(cj26))));
evalcond[5]=((IkReal(0.00624372621060710))+(((IkReal(0.327916000000000))*(x370)))+(((IkReal(-1.00000000000000))*(x374)))+(((IkReal(0.327916000000000))*(x368)))+(((x365)*(x369)))+(((IkReal(7.60874760000000e-8))*(cj26)))+(x371)+(((IkReal(0.0439812000000000))*(x366)))+(((IkReal(-1.00000000000000))*(x365)*(x367))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j27array[1], cj27array[1], sj27array[1];
bool j27valid[1]={false};
_nj27 = 1;
IkReal x375=((IkReal(8.51332139087077e-10))*(cj26));
if( IKabs(((gconst61)*(((((IkReal(-0.0180473625546446))*(npx)))+(((IkReal(-1.73000000000000e-6))*(npy)))+(((IkReal(-1.00000000000000))*(npy)*(x375))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst61)*(((((IkReal(-0.0180473625546446))*(npy)))+(((IkReal(1.73000000000000e-6))*(npx)))+(((npx)*(x375))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j27array[0]=IKatan2(((gconst61)*(((((IkReal(-0.0180473625546446))*(npx)))+(((IkReal(-1.73000000000000e-6))*(npy)))+(((IkReal(-1.00000000000000))*(npy)*(x375)))))), ((gconst61)*(((((IkReal(-0.0180473625546446))*(npy)))+(((IkReal(1.73000000000000e-6))*(npx)))+(((npx)*(x375)))))));
sj27array[0]=IKsin(j27array[0]);
cj27array[0]=IKcos(j27array[0]);
if( j27array[0] > IKPI )
{
    j27array[0]-=IK2PI;
}
else if( j27array[0] < -IKPI )
{    j27array[0]+=IK2PI;
}
j27valid[0] = true;
for(int ij27 = 0; ij27 < 1; ++ij27)
{
if( !j27valid[ij27] )
{
    continue;
}
_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < 1; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break; 
}
}
j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
{
IkReal evalcond[6];
IkReal x376=IKcos(j27);
IkReal x377=IKsin(j27);
IkReal x378=((IkReal(1.00000000000000))*(pp));
IkReal x379=((IkReal(0.0439812000000000))*(cj26));
IkReal x380=((npz)*(sj26));
IkReal x381=((npx)*(x376));
IkReal x382=((npy)*(x376));
IkReal x383=((npy)*(x377));
IkReal x384=((npx)*(x377));
IkReal x385=((IkReal(3.46000000000000e-6))*(x381));
IkReal x386=((IkReal(3.46000000000000e-6))*(x383));
IkReal x387=((IkReal(1.00000000000000))*(x383));
IkReal x388=((x386)+(x378));
evalcond[0]=((IkReal(0.0180473625546446))+(x384)+(x382));
evalcond[1]=((IkReal(0.000325707233695655))+(x385)+(((IkReal(-1.00000000000000))*(x388))));
evalcond[2]=((((cj26)*(npz)))+(((IkReal(-1.00000000000000))*(sj26)*(x387)))+(((sj26)*(x381)))+(((IkReal(-1.73000000000000e-6))*(sj26))));
evalcond[3]=((IkReal(-1.73000000000000e-6))+(((IkReal(-8.51332139087077e-10))*(cj26)))+(x381)+(((IkReal(-1.00000000000000))*(x387))));
evalcond[4]=((IkReal(-8.51332139087077e-10))+(((IkReal(-1.00000000000000))*(cj26)*(x387)))+(((IkReal(-1.00000000000000))*(x380)))+(((cj26)*(x381)))+(((IkReal(-1.73000000000000e-6))*(cj26))));
evalcond[5]=((IkReal(0.00624372621060710))+(((IkReal(-1.00000000000000))*(x379)*(x381)))+(((IkReal(0.0439812000000000))*(x380)))+(((IkReal(7.60874760000000e-8))*(cj26)))+(x385)+(((IkReal(0.327916000000000))*(x382)))+(((IkReal(0.327916000000000))*(x384)))+(((x379)*(x383)))+(((IkReal(-1.00000000000000))*(x388))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

} else
{
{
IkReal j27array[1], cj27array[1], sj27array[1];
bool j27valid[1]={false};
_nj27 = 1;
IkReal x389=((IkReal(50000000.0000000))*(pp));
if( IKabs(((gconst60)*(((((IkReal(16285.3616847828))*(npy)))+(((IkReal(-1.00000000000000))*(npy)*(x389)))+(((IkReal(-3.12219372195351))*(npx))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst60)*(((((npx)*(x389)))+(((IkReal(-16285.3616847828))*(npx)))+(((IkReal(-3.12219372195351))*(npy))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j27array[0]=IKatan2(((gconst60)*(((((IkReal(16285.3616847828))*(npy)))+(((IkReal(-1.00000000000000))*(npy)*(x389)))+(((IkReal(-3.12219372195351))*(npx)))))), ((gconst60)*(((((npx)*(x389)))+(((IkReal(-16285.3616847828))*(npx)))+(((IkReal(-3.12219372195351))*(npy)))))));
sj27array[0]=IKsin(j27array[0]);
cj27array[0]=IKcos(j27array[0]);
if( j27array[0] > IKPI )
{
    j27array[0]-=IK2PI;
}
else if( j27array[0] < -IKPI )
{    j27array[0]+=IK2PI;
}
j27valid[0] = true;
for(int ij27 = 0; ij27 < 1; ++ij27)
{
if( !j27valid[ij27] )
{
    continue;
}
_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < 1; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break; 
}
}
j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
{
IkReal evalcond[2];
IkReal x390=IKcos(j27);
IkReal x391=IKsin(j27);
evalcond[0]=((IkReal(0.0180473625546446))+(((npy)*(x390)))+(((npx)*(x391))));
evalcond[1]=((IkReal(0.000325707233695655))+(((IkReal(-3.46000000000000e-6))*(npy)*(x391)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(3.46000000000000e-6))*(npx)*(x390))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
if( IKabs(((IkReal(-1174629682.22056))*(npz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-2032.10935024156))+(((IkReal(1174629682.22056))*(cj27)*(npx)))+(((IkReal(-1174629682.22056))*(npy)*(sj27))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1174629682.22056))*(npz)))+IKsqr(((IkReal(-2032.10935024156))+(((IkReal(1174629682.22056))*(cj27)*(npx)))+(((IkReal(-1174629682.22056))*(npy)*(sj27)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j26array[0]=IKatan2(((IkReal(-1174629682.22056))*(npz)), ((IkReal(-2032.10935024156))+(((IkReal(1174629682.22056))*(cj27)*(npx)))+(((IkReal(-1174629682.22056))*(npy)*(sj27)))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[5];
IkReal x392=IKsin(j26);
IkReal x393=IKcos(j26);
IkReal x394=((cj27)*(npx));
IkReal x395=((npy)*(sj27));
IkReal x396=((IkReal(1.00000000000000))*(x395));
IkReal x397=((IkReal(0.0439812000000000))*(x393));
IkReal x398=((npz)*(x392));
evalcond[0]=((npz)+(((IkReal(8.51332139087077e-10))*(x392))));
evalcond[1]=((((IkReal(-1.73000000000000e-6))*(x392)))+(((npz)*(x393)))+(((IkReal(-1.00000000000000))*(x392)*(x396)))+(((x392)*(x394))));
evalcond[2]=((IkReal(-1.73000000000000e-6))+(((IkReal(-1.00000000000000))*(x396)))+(x394)+(((IkReal(-8.51332139087077e-10))*(x393))));
evalcond[3]=((IkReal(-8.51332139087077e-10))+(((IkReal(-1.73000000000000e-6))*(x393)))+(((IkReal(-1.00000000000000))*(x398)))+(((IkReal(-1.00000000000000))*(x393)*(x396)))+(((x393)*(x394))));
evalcond[4]=((IkReal(0.00624372621060710))+(((IkReal(7.60874760000000e-8))*(x393)))+(((IkReal(-3.46000000000000e-6))*(x395)))+(((IkReal(-1.00000000000000))*(x394)*(x397)))+(((x395)*(x397)))+(((IkReal(0.327916000000000))*(npx)*(sj27)))+(((IkReal(0.327916000000000))*(cj27)*(npy)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(3.46000000000000e-6))*(x394)))+(((IkReal(0.0439812000000000))*(x398))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j26array[2], cj26array[2], sj26array[2];
bool j26valid[2]={false};
_nj26 = 2;
sj26array[0]=((IkReal(-1.00000000000000))*(npz)*(((IKabs(((IkReal(-0.0219906000000000))+(((IkReal(0.182005000000000))*(sj25)))+(((IkReal(0.0219936000000000))*(cj25))))) != 0)?((IkReal)1/(((IkReal(-0.0219906000000000))+(((IkReal(0.182005000000000))*(sj25)))+(((IkReal(0.0219936000000000))*(cj25)))))):(IkReal)1.0e30)));
if( sj26array[0] >= -1-IKFAST_SINCOS_THRESH && sj26array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j26valid[0] = j26valid[1] = true;
    j26array[0] = IKasin(sj26array[0]);
    cj26array[0] = IKcos(j26array[0]);
    sj26array[1] = sj26array[0];
    j26array[1] = j26array[0] > 0 ? (IKPI-j26array[0]) : (-IKPI-j26array[0]);
    cj26array[1] = -cj26array[0];
}
else if( isnan(sj26array[0]) )
{
    // probably any value will work
    j26valid[0] = true;
    cj26array[0] = 1; sj26array[0] = 0; j26array[0] = 0;
}
for(int ij26 = 0; ij26 < 2; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 2; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];

{
IkReal dummyeval[1];
IkReal gconst49;
gconst49=IKsign(((((sj26)*((npx)*(npx))))+(((sj26)*((npy)*(npy))))));
dummyeval[0]=((((sj26)*((npx)*(npx))))+(((sj26)*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst50;
gconst50=IKsign(((((IkReal(173.000000000000))*((npy)*(npy))))+(((IkReal(173.000000000000))*((npx)*(npx))))));
dummyeval[0]=(((npx)*(npx))+((npy)*(npy)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j26)), IkReal(6.28318530717959))));
evalcond[1]=npz;
evalcond[2]=npz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst51;
gconst51=IKsign((((npx)*(npx))+((npy)*(npy))));
dummyeval[0]=(((npx)*(npx))+((npy)*(npy)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst52;
gconst52=IKsign(((((IkReal(173.000000000000))*((npy)*(npy))))+(((IkReal(173.000000000000))*((npx)*(npx))))));
dummyeval[0]=(((npx)*(npx))+((npy)*(npy)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j27array[1], cj27array[1], sj27array[1];
bool j27valid[1]={false};
_nj27 = 1;
IkReal x399=((IkReal(760842.582180000))*(sj25));
IkReal x400=((IkReal(31.4868650000000))*(cj25));
IkReal x401=((IkReal(3.80489280000000))*(sj25));
IkReal x402=((IkReal(50000000.0000000))*(pp));
IkReal x403=((IkReal(2935752.33298400))*(cj25));
if( IKabs(((gconst52)*(((((IkReal(-1.00000000000000))*(npx)*(x401)))+(((IkReal(-1.00000000000000))*(npy)*(x402)))+(((npy)*(x403)))+(((IkReal(28.3647340000000))*(npx)))+(((npx)*(x400)))+(((IkReal(3048767.53576635))*(npy)))+(((IkReal(-1.00000000000000))*(npy)*(x399))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst52)*(((((IkReal(-1.00000000000000))*(npx)*(x403)))+(((npx)*(x399)))+(((IkReal(-1.00000000000000))*(npy)*(x401)))+(((npy)*(x400)))+(((IkReal(28.3647340000000))*(npy)))+(((npx)*(x402)))+(((IkReal(-3048767.53576635))*(npx))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j27array[0]=IKatan2(((gconst52)*(((((IkReal(-1.00000000000000))*(npx)*(x401)))+(((IkReal(-1.00000000000000))*(npy)*(x402)))+(((npy)*(x403)))+(((IkReal(28.3647340000000))*(npx)))+(((npx)*(x400)))+(((IkReal(3048767.53576635))*(npy)))+(((IkReal(-1.00000000000000))*(npy)*(x399)))))), ((gconst52)*(((((IkReal(-1.00000000000000))*(npx)*(x403)))+(((npx)*(x399)))+(((IkReal(-1.00000000000000))*(npy)*(x401)))+(((npy)*(x400)))+(((IkReal(28.3647340000000))*(npy)))+(((npx)*(x402)))+(((IkReal(-3048767.53576635))*(npx)))))));
sj27array[0]=IKsin(j27array[0]);
cj27array[0]=IKcos(j27array[0]);
if( j27array[0] > IKPI )
{
    j27array[0]-=IK2PI;
}
else if( j27array[0] < -IKPI )
{    j27array[0]+=IK2PI;
}
j27valid[0] = true;
for(int ij27 = 0; ij27 < 1; ++ij27)
{
if( !j27valid[ij27] )
{
    continue;
}
_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < 1; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break; 
}
}
j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
{
IkReal evalcond[4];
IkReal x404=IKcos(j27);
IkReal x405=IKsin(j27);
IkReal x406=((IkReal(1.00000000000000))*(pp));
IkReal x407=((npy)*(x405));
IkReal x408=((npx)*(x405));
IkReal x409=((npx)*(x404));
IkReal x410=((npy)*(x404));
evalcond[0]=((IkReal(-0.163958000000000))+(((IkReal(0.0219936000000000))*(sj25)))+(((IkReal(-0.182005000000000))*(cj25)))+(x408)+(x410));
evalcond[1]=((IkReal(0.0609753507153271))+(((IkReal(-0.0152168516436000))*(sj25)))+(((IkReal(3.46000000000000e-6))*(x409)))+(((IkReal(-3.46000000000000e-6))*(x407)))+(((IkReal(0.0587150466596800))*(cj25)))+(((IkReal(-1.00000000000000))*(x406))));
evalcond[2]=((IkReal(0.0219888700000000))+(((IkReal(-0.182005000000000))*(sj25)))+(x409)+(((IkReal(-0.0219936000000000))*(cj25)))+(((IkReal(-1.00000000000000))*(x407))));
evalcond[3]=((IkReal(0.00624380229808310))+(((IkReal(0.327916000000000))*(x408)))+(((IkReal(0.327916000000000))*(x410)))+(((IkReal(0.0439777400000000))*(x407)))+(((IkReal(-0.0439777400000000))*(x409)))+(((IkReal(-1.00000000000000))*(x406))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j27array[1], cj27array[1], sj27array[1];
bool j27valid[1]={false};
_nj27 = 1;
IkReal x411=((npx)*(sj25));
IkReal x412=((cj25)*(npy));
IkReal x413=((cj25)*(npx));
IkReal x414=((npy)*(sj25));
if( IKabs(((gconst51)*(((((IkReal(0.163958000000000))*(npx)))+(((IkReal(-0.182005000000000))*(x414)))+(((IkReal(-0.0219936000000000))*(x412)))+(((IkReal(-0.0219936000000000))*(x411)))+(((IkReal(0.0219888700000000))*(npy)))+(((IkReal(0.182005000000000))*(x413))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst51)*(((((IkReal(0.163958000000000))*(npy)))+(((IkReal(-0.0219936000000000))*(x414)))+(((IkReal(0.0219936000000000))*(x413)))+(((IkReal(-0.0219888700000000))*(npx)))+(((IkReal(0.182005000000000))*(x411)))+(((IkReal(0.182005000000000))*(x412))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j27array[0]=IKatan2(((gconst51)*(((((IkReal(0.163958000000000))*(npx)))+(((IkReal(-0.182005000000000))*(x414)))+(((IkReal(-0.0219936000000000))*(x412)))+(((IkReal(-0.0219936000000000))*(x411)))+(((IkReal(0.0219888700000000))*(npy)))+(((IkReal(0.182005000000000))*(x413)))))), ((gconst51)*(((((IkReal(0.163958000000000))*(npy)))+(((IkReal(-0.0219936000000000))*(x414)))+(((IkReal(0.0219936000000000))*(x413)))+(((IkReal(-0.0219888700000000))*(npx)))+(((IkReal(0.182005000000000))*(x411)))+(((IkReal(0.182005000000000))*(x412)))))));
sj27array[0]=IKsin(j27array[0]);
cj27array[0]=IKcos(j27array[0]);
if( j27array[0] > IKPI )
{
    j27array[0]-=IK2PI;
}
else if( j27array[0] < -IKPI )
{    j27array[0]+=IK2PI;
}
j27valid[0] = true;
for(int ij27 = 0; ij27 < 1; ++ij27)
{
if( !j27valid[ij27] )
{
    continue;
}
_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < 1; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break; 
}
}
j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
{
IkReal evalcond[4];
IkReal x415=IKcos(j27);
IkReal x416=IKsin(j27);
IkReal x417=((IkReal(1.00000000000000))*(pp));
IkReal x418=((npy)*(x416));
IkReal x419=((npx)*(x416));
IkReal x420=((npx)*(x415));
IkReal x421=((npy)*(x415));
evalcond[0]=((IkReal(-0.163958000000000))+(((IkReal(0.0219936000000000))*(sj25)))+(((IkReal(-0.182005000000000))*(cj25)))+(x419)+(x421));
evalcond[1]=((IkReal(0.0609753507153271))+(((IkReal(-0.0152168516436000))*(sj25)))+(((IkReal(3.46000000000000e-6))*(x420)))+(((IkReal(-3.46000000000000e-6))*(x418)))+(((IkReal(0.0587150466596800))*(cj25)))+(((IkReal(-1.00000000000000))*(x417))));
evalcond[2]=((IkReal(0.0219888700000000))+(((IkReal(-0.182005000000000))*(sj25)))+(x420)+(((IkReal(-0.0219936000000000))*(cj25)))+(((IkReal(-1.00000000000000))*(x418))));
evalcond[3]=((IkReal(0.00624380229808310))+(((IkReal(0.327916000000000))*(x419)))+(((IkReal(-0.0439777400000000))*(x420)))+(((IkReal(0.0439777400000000))*(x418)))+(((IkReal(-1.00000000000000))*(x417)))+(((IkReal(0.327916000000000))*(x421))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j26, IkReal(6.28318530717959))));
evalcond[1]=npz;
evalcond[2]=((IkReal(-1.00000000000000))*(npz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst53;
gconst53=IKsign((((npx)*(npx))+((npy)*(npy))));
dummyeval[0]=(((npx)*(npx))+((npy)*(npy)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst54;
gconst54=IKsign(((((IkReal(173.000000000000))*((npy)*(npy))))+(((IkReal(173.000000000000))*((npx)*(npx))))));
dummyeval[0]=(((npx)*(npx))+((npy)*(npy)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j27array[1], cj27array[1], sj27array[1];
bool j27valid[1]={false};
_nj27 = 1;
IkReal x422=((IkReal(760842.582180000))*(sj25));
IkReal x423=((IkReal(31.4868650000000))*(cj25));
IkReal x424=((IkReal(3.80489280000000))*(sj25));
IkReal x425=((IkReal(50000000.0000000))*(pp));
IkReal x426=((IkReal(2935752.33298400))*(cj25));
if( IKabs(((gconst54)*(((((npx)*(x423)))+(((IkReal(-1.00000000000000))*(npx)*(x424)))+(((IkReal(-1.00000000000000))*(npy)*(x425)))+(((IkReal(-1.00000000000000))*(npy)*(x422)))+(((npy)*(x426)))+(((IkReal(28.3647340000000))*(npx)))+(((IkReal(3048767.53576635))*(npy))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst54)*(((((npx)*(x425)))+(((npx)*(x422)))+(((IkReal(-1.00000000000000))*(npx)*(x426)))+(((IkReal(-1.00000000000000))*(npy)*(x424)))+(((npy)*(x423)))+(((IkReal(28.3647340000000))*(npy)))+(((IkReal(-3048767.53576635))*(npx))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j27array[0]=IKatan2(((gconst54)*(((((npx)*(x423)))+(((IkReal(-1.00000000000000))*(npx)*(x424)))+(((IkReal(-1.00000000000000))*(npy)*(x425)))+(((IkReal(-1.00000000000000))*(npy)*(x422)))+(((npy)*(x426)))+(((IkReal(28.3647340000000))*(npx)))+(((IkReal(3048767.53576635))*(npy)))))), ((gconst54)*(((((npx)*(x425)))+(((npx)*(x422)))+(((IkReal(-1.00000000000000))*(npx)*(x426)))+(((IkReal(-1.00000000000000))*(npy)*(x424)))+(((npy)*(x423)))+(((IkReal(28.3647340000000))*(npy)))+(((IkReal(-3048767.53576635))*(npx)))))));
sj27array[0]=IKsin(j27array[0]);
cj27array[0]=IKcos(j27array[0]);
if( j27array[0] > IKPI )
{
    j27array[0]-=IK2PI;
}
else if( j27array[0] < -IKPI )
{    j27array[0]+=IK2PI;
}
j27valid[0] = true;
for(int ij27 = 0; ij27 < 1; ++ij27)
{
if( !j27valid[ij27] )
{
    continue;
}
_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < 1; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break; 
}
}
j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
{
IkReal evalcond[4];
IkReal x427=IKcos(j27);
IkReal x428=IKsin(j27);
IkReal x429=((IkReal(1.00000000000000))*(pp));
IkReal x430=((npy)*(x428));
IkReal x431=((npx)*(x428));
IkReal x432=((npx)*(x427));
IkReal x433=((npy)*(x427));
evalcond[0]=((IkReal(-0.163958000000000))+(((IkReal(0.0219936000000000))*(sj25)))+(((IkReal(-0.182005000000000))*(cj25)))+(x431)+(x433));
evalcond[1]=((IkReal(0.0609753507153271))+(((IkReal(-0.0152168516436000))*(sj25)))+(((IkReal(-1.00000000000000))*(x429)))+(((IkReal(3.46000000000000e-6))*(x432)))+(((IkReal(0.0587150466596800))*(cj25)))+(((IkReal(-3.46000000000000e-6))*(x430))));
evalcond[2]=((IkReal(-0.0219923300000000))+(((IkReal(-1.00000000000000))*(x430)))+(((IkReal(0.182005000000000))*(sj25)))+(x432)+(((IkReal(0.0219936000000000))*(cj25))));
evalcond[3]=((IkReal(0.00624365012313110))+(((IkReal(-1.00000000000000))*(x429)))+(((IkReal(-0.0439846600000000))*(x430)))+(((IkReal(0.0439846600000000))*(x432)))+(((IkReal(0.327916000000000))*(x433)))+(((IkReal(0.327916000000000))*(x431))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j27array[1], cj27array[1], sj27array[1];
bool j27valid[1]={false};
_nj27 = 1;
IkReal x434=((npx)*(sj25));
IkReal x435=((cj25)*(npy));
IkReal x436=((cj25)*(npx));
IkReal x437=((npy)*(sj25));
if( IKabs(((gconst53)*(((((IkReal(0.163958000000000))*(npx)))+(((IkReal(0.0219936000000000))*(x435)))+(((IkReal(-0.0219936000000000))*(x434)))+(((IkReal(-0.0219923300000000))*(npy)))+(((IkReal(0.182005000000000))*(x437)))+(((IkReal(0.182005000000000))*(x436))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst53)*(((((IkReal(0.163958000000000))*(npy)))+(((IkReal(-0.182005000000000))*(x434)))+(((IkReal(-0.0219936000000000))*(x436)))+(((IkReal(-0.0219936000000000))*(x437)))+(((IkReal(0.182005000000000))*(x435)))+(((IkReal(0.0219923300000000))*(npx))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j27array[0]=IKatan2(((gconst53)*(((((IkReal(0.163958000000000))*(npx)))+(((IkReal(0.0219936000000000))*(x435)))+(((IkReal(-0.0219936000000000))*(x434)))+(((IkReal(-0.0219923300000000))*(npy)))+(((IkReal(0.182005000000000))*(x437)))+(((IkReal(0.182005000000000))*(x436)))))), ((gconst53)*(((((IkReal(0.163958000000000))*(npy)))+(((IkReal(-0.182005000000000))*(x434)))+(((IkReal(-0.0219936000000000))*(x436)))+(((IkReal(-0.0219936000000000))*(x437)))+(((IkReal(0.182005000000000))*(x435)))+(((IkReal(0.0219923300000000))*(npx)))))));
sj27array[0]=IKsin(j27array[0]);
cj27array[0]=IKcos(j27array[0]);
if( j27array[0] > IKPI )
{
    j27array[0]-=IK2PI;
}
else if( j27array[0] < -IKPI )
{    j27array[0]+=IK2PI;
}
j27valid[0] = true;
for(int ij27 = 0; ij27 < 1; ++ij27)
{
if( !j27valid[ij27] )
{
    continue;
}
_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < 1; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break; 
}
}
j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
{
IkReal evalcond[4];
IkReal x438=IKcos(j27);
IkReal x439=IKsin(j27);
IkReal x440=((IkReal(1.00000000000000))*(pp));
IkReal x441=((npy)*(x439));
IkReal x442=((npx)*(x439));
IkReal x443=((npx)*(x438));
IkReal x444=((npy)*(x438));
evalcond[0]=((IkReal(-0.163958000000000))+(((IkReal(0.0219936000000000))*(sj25)))+(((IkReal(-0.182005000000000))*(cj25)))+(x444)+(x442));
evalcond[1]=((IkReal(0.0609753507153271))+(((IkReal(-1.00000000000000))*(x440)))+(((IkReal(-0.0152168516436000))*(sj25)))+(((IkReal(3.46000000000000e-6))*(x443)))+(((IkReal(0.0587150466596800))*(cj25)))+(((IkReal(-3.46000000000000e-6))*(x441))));
evalcond[2]=((IkReal(-0.0219923300000000))+(((IkReal(-1.00000000000000))*(x441)))+(((IkReal(0.182005000000000))*(sj25)))+(x443)+(((IkReal(0.0219936000000000))*(cj25))));
evalcond[3]=((IkReal(0.00624365012313110))+(((IkReal(-1.00000000000000))*(x440)))+(((IkReal(0.0439846600000000))*(x443)))+(((IkReal(-0.0439846600000000))*(x441)))+(((IkReal(0.327916000000000))*(x442)))+(((IkReal(0.327916000000000))*(x444))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j27array[1], cj27array[1], sj27array[1];
bool j27valid[1]={false};
_nj27 = 1;
IkReal x445=((IkReal(760842.582180000))*(sj25));
IkReal x446=((IkReal(31.4868650000000))*(cj25));
IkReal x447=((IkReal(3.80489280000000))*(sj25));
IkReal x448=((IkReal(50000000.0000000))*(pp));
IkReal x449=((IkReal(2935752.33298400))*(cj25));
if( IKabs(((gconst50)*(((((IkReal(-1.00000000000000))*(npy)*(x445)))+(((IkReal(-1.00000000000000))*(npy)*(x448)))+(((npy)*(x449)))+(((IkReal(-1.00000000000000))*(npx)*(x447)))+(((IkReal(28.3647340000000))*(npx)))+(((IkReal(3048767.53576635))*(npy)))+(((npx)*(x446))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst50)*(((((IkReal(-1.00000000000000))*(npy)*(x447)))+(((npy)*(x446)))+(((IkReal(-1.00000000000000))*(npx)*(x449)))+(((IkReal(28.3647340000000))*(npy)))+(((IkReal(-3048767.53576635))*(npx)))+(((npx)*(x445)))+(((npx)*(x448))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j27array[0]=IKatan2(((gconst50)*(((((IkReal(-1.00000000000000))*(npy)*(x445)))+(((IkReal(-1.00000000000000))*(npy)*(x448)))+(((npy)*(x449)))+(((IkReal(-1.00000000000000))*(npx)*(x447)))+(((IkReal(28.3647340000000))*(npx)))+(((IkReal(3048767.53576635))*(npy)))+(((npx)*(x446)))))), ((gconst50)*(((((IkReal(-1.00000000000000))*(npy)*(x447)))+(((npy)*(x446)))+(((IkReal(-1.00000000000000))*(npx)*(x449)))+(((IkReal(28.3647340000000))*(npy)))+(((IkReal(-3048767.53576635))*(npx)))+(((npx)*(x445)))+(((npx)*(x448)))))));
sj27array[0]=IKsin(j27array[0]);
cj27array[0]=IKcos(j27array[0]);
if( j27array[0] > IKPI )
{
    j27array[0]-=IK2PI;
}
else if( j27array[0] < -IKPI )
{    j27array[0]+=IK2PI;
}
j27valid[0] = true;
for(int ij27 = 0; ij27 < 1; ++ij27)
{
if( !j27valid[ij27] )
{
    continue;
}
_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < 1; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break; 
}
}
j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
{
IkReal evalcond[6];
IkReal x450=IKcos(j27);
IkReal x451=IKsin(j27);
IkReal x452=((IkReal(1.00000000000000))*(pp));
IkReal x453=((IkReal(0.182005000000000))*(sj25));
IkReal x454=((IkReal(0.0219936000000000))*(cj25));
IkReal x455=((npz)*(sj26));
IkReal x456=((IkReal(0.0439812000000000))*(cj26));
IkReal x457=((npx)*(x450));
IkReal x458=((npy)*(x450));
IkReal x459=((npy)*(x451));
IkReal x460=((npx)*(x451));
IkReal x461=((IkReal(3.46000000000000e-6))*(x457));
IkReal x462=((IkReal(3.46000000000000e-6))*(x459));
IkReal x463=((IkReal(1.00000000000000))*(x459));
IkReal x464=((x452)+(x462));
evalcond[0]=((IkReal(-0.163958000000000))+(((IkReal(0.0219936000000000))*(sj25)))+(((IkReal(-0.182005000000000))*(cj25)))+(x458)+(x460));
evalcond[1]=((IkReal(0.0609753507153271))+(((IkReal(-0.0152168516436000))*(sj25)))+(((IkReal(-1.00000000000000))*(x464)))+(x461)+(((IkReal(0.0587150466596800))*(cj25))));
evalcond[2]=((((cj26)*(npz)))+(((IkReal(-1.00000000000000))*(sj26)*(x463)))+(((IkReal(-1.73000000000000e-6))*(sj26)))+(((sj26)*(x457))));
evalcond[3]=((IkReal(-1.73000000000000e-6))+(((IkReal(0.0219906000000000))*(cj26)))+(((IkReal(-1.00000000000000))*(cj26)*(x453)))+(((IkReal(-1.00000000000000))*(cj26)*(x454)))+(((IkReal(-1.00000000000000))*(x463)))+(x457));
evalcond[4]=((IkReal(0.0219906000000000))+(((IkReal(-1.00000000000000))*(cj26)*(x463)))+(((IkReal(-1.00000000000000))*(x455)))+(((IkReal(-1.00000000000000))*(x453)))+(((IkReal(-1.00000000000000))*(x454)))+(((IkReal(-1.73000000000000e-6))*(cj26)))+(((cj26)*(x457))));
evalcond[5]=((IkReal(0.00624372621060710))+(((IkReal(0.327916000000000))*(x458)))+(((IkReal(0.327916000000000))*(x460)))+(((IkReal(-1.00000000000000))*(x456)*(x457)))+(((IkReal(-1.00000000000000))*(x464)))+(((IkReal(7.60874760000000e-8))*(cj26)))+(x461)+(((IkReal(0.0439812000000000))*(x455)))+(((x456)*(x459))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j27array[1], cj27array[1], sj27array[1];
bool j27valid[1]={false};
_nj27 = 1;
IkReal x465=((IkReal(0.163958000000000))*(sj26));
IkReal x466=((npy)*(sj26));
IkReal x467=((IkReal(0.182005000000000))*(cj25));
IkReal x468=((IkReal(0.0219936000000000))*(sj25));
IkReal x469=((npx)*(sj26));
IkReal x470=((cj26)*(npz));
if( IKabs(((gconst49)*(((((npy)*(x470)))+(((IkReal(-1.00000000000000))*(x468)*(x469)))+(((npx)*(x465)))+(((x467)*(x469)))+(((IkReal(-1.73000000000000e-6))*(x466))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst49)*(((((IkReal(-1.00000000000000))*(x466)*(x468)))+(((x466)*(x467)))+(((IkReal(-1.00000000000000))*(npx)*(x470)))+(((IkReal(1.73000000000000e-6))*(x469)))+(((npy)*(x465))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j27array[0]=IKatan2(((gconst49)*(((((npy)*(x470)))+(((IkReal(-1.00000000000000))*(x468)*(x469)))+(((npx)*(x465)))+(((x467)*(x469)))+(((IkReal(-1.73000000000000e-6))*(x466)))))), ((gconst49)*(((((IkReal(-1.00000000000000))*(x466)*(x468)))+(((x466)*(x467)))+(((IkReal(-1.00000000000000))*(npx)*(x470)))+(((IkReal(1.73000000000000e-6))*(x469)))+(((npy)*(x465)))))));
sj27array[0]=IKsin(j27array[0]);
cj27array[0]=IKcos(j27array[0]);
if( j27array[0] > IKPI )
{
    j27array[0]-=IK2PI;
}
else if( j27array[0] < -IKPI )
{    j27array[0]+=IK2PI;
}
j27valid[0] = true;
for(int ij27 = 0; ij27 < 1; ++ij27)
{
if( !j27valid[ij27] )
{
    continue;
}
_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < 1; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break; 
}
}
j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
{
IkReal evalcond[6];
IkReal x471=IKcos(j27);
IkReal x472=IKsin(j27);
IkReal x473=((IkReal(1.00000000000000))*(pp));
IkReal x474=((IkReal(0.182005000000000))*(sj25));
IkReal x475=((IkReal(0.0219936000000000))*(cj25));
IkReal x476=((npz)*(sj26));
IkReal x477=((IkReal(0.0439812000000000))*(cj26));
IkReal x478=((npx)*(x471));
IkReal x479=((npy)*(x471));
IkReal x480=((npy)*(x472));
IkReal x481=((npx)*(x472));
IkReal x482=((IkReal(3.46000000000000e-6))*(x478));
IkReal x483=((IkReal(3.46000000000000e-6))*(x480));
IkReal x484=((IkReal(1.00000000000000))*(x480));
IkReal x485=((x483)+(x473));
evalcond[0]=((IkReal(-0.163958000000000))+(((IkReal(0.0219936000000000))*(sj25)))+(((IkReal(-0.182005000000000))*(cj25)))+(x481)+(x479));
evalcond[1]=((IkReal(0.0609753507153271))+(((IkReal(-1.00000000000000))*(x485)))+(((IkReal(-0.0152168516436000))*(sj25)))+(x482)+(((IkReal(0.0587150466596800))*(cj25))));
evalcond[2]=((((cj26)*(npz)))+(((IkReal(-1.00000000000000))*(sj26)*(x484)))+(((IkReal(-1.73000000000000e-6))*(sj26)))+(((sj26)*(x478))));
evalcond[3]=((IkReal(-1.73000000000000e-6))+(((IkReal(0.0219906000000000))*(cj26)))+(((IkReal(-1.00000000000000))*(x484)))+(((IkReal(-1.00000000000000))*(cj26)*(x474)))+(((IkReal(-1.00000000000000))*(cj26)*(x475)))+(x478));
evalcond[4]=((IkReal(0.0219906000000000))+(((IkReal(-1.00000000000000))*(cj26)*(x484)))+(((IkReal(-1.00000000000000))*(x475)))+(((IkReal(-1.00000000000000))*(x474)))+(((IkReal(-1.00000000000000))*(x476)))+(((cj26)*(x478)))+(((IkReal(-1.73000000000000e-6))*(cj26))));
evalcond[5]=((IkReal(0.00624372621060710))+(((IkReal(0.327916000000000))*(x479)))+(((IkReal(-1.00000000000000))*(x477)*(x478)))+(((IkReal(-1.00000000000000))*(x485)))+(((IkReal(7.60874760000000e-8))*(cj26)))+(x482)+(((IkReal(0.0439812000000000))*(x476)))+(((IkReal(0.327916000000000))*(x481)))+(((x477)*(x480))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j27array[1], cj27array[1], sj27array[1];
bool j27valid[1]={false};
_nj27 = 1;
IkReal x486=((npx)*(sj25));
IkReal x487=((npy)*(sj25));
IkReal x488=((IkReal(31.4868650000000))*(cj25));
IkReal x489=((IkReal(50000000.0000000))*(pp));
IkReal x490=((IkReal(2935752.33298400))*(cj25));
if( IKabs(((gconst48)*(((((IkReal(-3.80489280000000))*(x486)))+(((npx)*(x488)))+(((IkReal(-1.00000000000000))*(npy)*(x489)))+(((IkReal(28.3647340000000))*(npx)))+(((IkReal(-760842.582180000))*(x487)))+(((IkReal(3048767.53576635))*(npy)))+(((npy)*(x490))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst48)*(((((IkReal(-3.80489280000000))*(x487)))+(((npx)*(x489)))+(((IkReal(760842.582180000))*(x486)))+(((IkReal(28.3647340000000))*(npy)))+(((npy)*(x488)))+(((IkReal(-1.00000000000000))*(npx)*(x490)))+(((IkReal(-3048767.53576635))*(npx))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j27array[0]=IKatan2(((gconst48)*(((((IkReal(-3.80489280000000))*(x486)))+(((npx)*(x488)))+(((IkReal(-1.00000000000000))*(npy)*(x489)))+(((IkReal(28.3647340000000))*(npx)))+(((IkReal(-760842.582180000))*(x487)))+(((IkReal(3048767.53576635))*(npy)))+(((npy)*(x490)))))), ((gconst48)*(((((IkReal(-3.80489280000000))*(x487)))+(((npx)*(x489)))+(((IkReal(760842.582180000))*(x486)))+(((IkReal(28.3647340000000))*(npy)))+(((npy)*(x488)))+(((IkReal(-1.00000000000000))*(npx)*(x490)))+(((IkReal(-3048767.53576635))*(npx)))))));
sj27array[0]=IKsin(j27array[0]);
cj27array[0]=IKcos(j27array[0]);
if( j27array[0] > IKPI )
{
    j27array[0]-=IK2PI;
}
else if( j27array[0] < -IKPI )
{    j27array[0]+=IK2PI;
}
j27valid[0] = true;
for(int ij27 = 0; ij27 < 1; ++ij27)
{
if( !j27valid[ij27] )
{
    continue;
}
_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < 1; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break; 
}
}
j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
{
IkReal evalcond[2];
IkReal x491=IKcos(j27);
IkReal x492=IKsin(j27);
evalcond[0]=((IkReal(-0.163958000000000))+(((npx)*(x492)))+(((IkReal(0.0219936000000000))*(sj25)))+(((IkReal(-0.182005000000000))*(cj25)))+(((npy)*(x491))));
evalcond[1]=((IkReal(0.0609753507153271))+(((IkReal(-3.46000000000000e-6))*(npy)*(x492)))+(((IkReal(-0.0152168516436000))*(sj25)))+(((IkReal(3.46000000000000e-6))*(npx)*(x491)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0587150466596800))*(cj25))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst55;
gconst55=IKsign(((IkReal(-0.0219906000000000))+(((IkReal(0.182005000000000))*(sj25)))+(((IkReal(0.0219936000000000))*(cj25)))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(8.27649086427837))*(sj25)))+(((IkReal(1.00013642192573))*(cj25))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst56;
gconst56=IKsign(((IkReal(-0.0219906000000000))+(((IkReal(0.182005000000000))*(sj25)))+(((IkReal(0.0219936000000000))*(cj25)))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(8.27649086427837))*(sj25)))+(((IkReal(1.00013642192573))*(cj25))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14160913663703))+(j25)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.345963362454528))+(((npx)*(sj27)))+(((cj27)*(npy))));
evalcond[2]=((IkReal(0.119690648148722))+(((IkReal(-3.46000000000000e-6))*(npy)*(sj27)))+(((IkReal(3.46000000000000e-6))*(cj27)*(npx)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
if( IKabs(((IkReal(-1793400286.94405))*(npz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-3102.58249641320))+(((IkReal(1793400286.94405))*(cj27)*(npx)))+(((IkReal(-1793400286.94405))*(npy)*(sj27))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1793400286.94405))*(npz)))+IKsqr(((IkReal(-3102.58249641320))+(((IkReal(1793400286.94405))*(cj27)*(npx)))+(((IkReal(-1793400286.94405))*(npy)*(sj27)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j26array[0]=IKatan2(((IkReal(-1793400286.94405))*(npz)), ((IkReal(-3102.58249641320))+(((IkReal(1793400286.94405))*(cj27)*(npx)))+(((IkReal(-1793400286.94405))*(npy)*(sj27)))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[5];
IkReal x493=IKsin(j26);
IkReal x494=IKcos(j26);
IkReal x495=((cj27)*(npx));
IkReal x496=((npy)*(sj27));
IkReal x497=((IkReal(1.00000000000000))*(x496));
IkReal x498=((IkReal(0.0439812000000000))*(x494));
IkReal x499=((npz)*(x493));
evalcond[0]=((npz)+(((IkReal(5.57600000000000e-10))*(x493))));
evalcond[1]=((((IkReal(-1.73000000000000e-6))*(x493)))+(((x493)*(x495)))+(((IkReal(-1.00000000000000))*(x493)*(x497)))+(((npz)*(x494))));
evalcond[2]=((IkReal(-1.73000000000000e-6))+(((IkReal(-1.00000000000000))*(x497)))+(((IkReal(-5.57600000000000e-10))*(x494)))+(x495));
evalcond[3]=((IkReal(-5.57600000000000e-10))+(((IkReal(-1.00000000000000))*(x494)*(x497)))+(((IkReal(-1.73000000000000e-6))*(x494)))+(((x494)*(x495)))+(((IkReal(-1.00000000000000))*(x499))));
evalcond[4]=((IkReal(0.00624372621060710))+(((IkReal(-1.00000000000000))*(x495)*(x498)))+(((x496)*(x498)))+(((IkReal(0.327916000000000))*(npx)*(sj27)))+(((IkReal(0.327916000000000))*(cj27)*(npy)))+(((IkReal(0.0439812000000000))*(x499)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(7.60874760000000e-8))*(x494)))+(((IkReal(-3.46000000000000e-6))*(x496)))+(((IkReal(3.46000000000000e-6))*(x495))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(0.240498609655184))+(j25)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.0180473625546446))+(((npx)*(sj27)))+(((cj27)*(npy))));
evalcond[2]=((IkReal(0.000325707233695655))+(((IkReal(-3.46000000000000e-6))*(npy)*(sj27)))+(((IkReal(3.46000000000000e-6))*(cj27)*(npx)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
if( IKabs(((IkReal(-1174629682.22056))*(npz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-2032.10935024156))+(((IkReal(1174629682.22056))*(cj27)*(npx)))+(((IkReal(-1174629682.22056))*(npy)*(sj27))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1174629682.22056))*(npz)))+IKsqr(((IkReal(-2032.10935024156))+(((IkReal(1174629682.22056))*(cj27)*(npx)))+(((IkReal(-1174629682.22056))*(npy)*(sj27)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j26array[0]=IKatan2(((IkReal(-1174629682.22056))*(npz)), ((IkReal(-2032.10935024156))+(((IkReal(1174629682.22056))*(cj27)*(npx)))+(((IkReal(-1174629682.22056))*(npy)*(sj27)))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[5];
IkReal x500=IKsin(j26);
IkReal x501=IKcos(j26);
IkReal x502=((cj27)*(npx));
IkReal x503=((npy)*(sj27));
IkReal x504=((IkReal(1.00000000000000))*(x503));
IkReal x505=((IkReal(0.0439812000000000))*(x501));
IkReal x506=((npz)*(x500));
evalcond[0]=((((IkReal(8.51332139087077e-10))*(x500)))+(npz));
evalcond[1]=((((x500)*(x502)))+(((IkReal(-1.73000000000000e-6))*(x500)))+(((npz)*(x501)))+(((IkReal(-1.00000000000000))*(x500)*(x504))));
evalcond[2]=((IkReal(-1.73000000000000e-6))+(((IkReal(-1.00000000000000))*(x504)))+(((IkReal(-8.51332139087077e-10))*(x501)))+(x502));
evalcond[3]=((IkReal(-8.51332139087077e-10))+(((IkReal(-1.73000000000000e-6))*(x501)))+(((IkReal(-1.00000000000000))*(x501)*(x504)))+(((x501)*(x502)))+(((IkReal(-1.00000000000000))*(x506))));
evalcond[4]=((IkReal(0.00624372621060710))+(((IkReal(-3.46000000000000e-6))*(x503)))+(((IkReal(0.327916000000000))*(npx)*(sj27)))+(((IkReal(0.327916000000000))*(cj27)*(npy)))+(((IkReal(-1.00000000000000))*(x502)*(x505)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(3.46000000000000e-6))*(x502)))+(((x503)*(x505)))+(((IkReal(7.60874760000000e-8))*(x501)))+(((IkReal(0.0439812000000000))*(x506))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(gconst56)*(npz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst56)*(((IkReal(-1.73000000000000e-6))+(((IkReal(-1.00000000000000))*(npy)*(sj27)))+(((cj27)*(npx))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j26array[0]=IKatan2(((IkReal(-1.00000000000000))*(gconst56)*(npz)), ((gconst56)*(((IkReal(-1.73000000000000e-6))+(((IkReal(-1.00000000000000))*(npy)*(sj27)))+(((cj27)*(npx)))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[5];
IkReal x507=IKsin(j26);
IkReal x508=IKcos(j26);
IkReal x509=((IkReal(0.0219936000000000))*(cj25));
IkReal x510=((npy)*(sj27));
IkReal x511=((cj27)*(npx));
IkReal x512=((IkReal(0.182005000000000))*(sj25));
IkReal x513=((IkReal(1.00000000000000))*(x507));
IkReal x514=((IkReal(0.0439812000000000))*(x508));
evalcond[0]=((((IkReal(-0.0219906000000000))*(x507)))+(((x507)*(x512)))+(((x507)*(x509)))+(npz));
evalcond[1]=((((x507)*(x511)))+(((IkReal(-1.73000000000000e-6))*(x507)))+(((IkReal(-1.00000000000000))*(x510)*(x513)))+(((npz)*(x508))));
evalcond[2]=((IkReal(-1.73000000000000e-6))+(((IkReal(0.0219906000000000))*(x508)))+(((IkReal(-1.00000000000000))*(x508)*(x509)))+(((IkReal(-1.00000000000000))*(x510)))+(x511)+(((IkReal(-1.00000000000000))*(x508)*(x512))));
evalcond[3]=((IkReal(0.0219906000000000))+(((IkReal(-1.00000000000000))*(npz)*(x513)))+(((IkReal(-1.00000000000000))*(x509)))+(((IkReal(-1.73000000000000e-6))*(x508)))+(((IkReal(-1.00000000000000))*(x508)*(x510)))+(((IkReal(-1.00000000000000))*(x512)))+(((x508)*(x511))));
evalcond[4]=((IkReal(0.00624372621060710))+(((IkReal(3.46000000000000e-6))*(x511)))+(((IkReal(-1.00000000000000))*(x511)*(x514)))+(((x510)*(x514)))+(((IkReal(0.327916000000000))*(npx)*(sj27)))+(((IkReal(0.327916000000000))*(cj27)*(npy)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-3.46000000000000e-6))*(x510)))+(((IkReal(7.60874760000000e-8))*(x508)))+(((IkReal(0.0439812000000000))*(npz)*(x507))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(gconst55)*(npz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst55)*(((IkReal(-1.73000000000000e-6))+(((IkReal(-1.00000000000000))*(npy)*(sj27)))+(((cj27)*(npx))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j26array[0]=IKatan2(((IkReal(-1.00000000000000))*(gconst55)*(npz)), ((gconst55)*(((IkReal(-1.73000000000000e-6))+(((IkReal(-1.00000000000000))*(npy)*(sj27)))+(((cj27)*(npx)))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[5];
IkReal x515=IKsin(j26);
IkReal x516=IKcos(j26);
IkReal x517=((IkReal(0.0219936000000000))*(cj25));
IkReal x518=((npy)*(sj27));
IkReal x519=((cj27)*(npx));
IkReal x520=((IkReal(0.182005000000000))*(sj25));
IkReal x521=((IkReal(1.00000000000000))*(x515));
IkReal x522=((IkReal(0.0439812000000000))*(x516));
evalcond[0]=((((x515)*(x520)))+(npz)+(((IkReal(-0.0219906000000000))*(x515)))+(((x515)*(x517))));
evalcond[1]=((((npz)*(x516)))+(((IkReal(-1.00000000000000))*(x518)*(x521)))+(((x515)*(x519)))+(((IkReal(-1.73000000000000e-6))*(x515))));
evalcond[2]=((IkReal(-1.73000000000000e-6))+(((IkReal(-1.00000000000000))*(x518)))+(((IkReal(-1.00000000000000))*(x516)*(x517)))+(((IkReal(0.0219906000000000))*(x516)))+(x519)+(((IkReal(-1.00000000000000))*(x516)*(x520))));
evalcond[3]=((IkReal(0.0219906000000000))+(((IkReal(-1.00000000000000))*(npz)*(x521)))+(((IkReal(-1.00000000000000))*(x520)))+(((IkReal(-1.00000000000000))*(x516)*(x518)))+(((x516)*(x519)))+(((IkReal(-1.73000000000000e-6))*(x516)))+(((IkReal(-1.00000000000000))*(x517))));
evalcond[4]=((IkReal(0.00624372621060710))+(((IkReal(3.46000000000000e-6))*(x519)))+(((IkReal(0.0439812000000000))*(npz)*(x515)))+(((IkReal(7.60874760000000e-8))*(x516)))+(((IkReal(0.327916000000000))*(npx)*(sj27)))+(((IkReal(0.327916000000000))*(cj27)*(npy)))+(((x518)*(x522)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-3.46000000000000e-6))*(x518)))+(((IkReal(-1.00000000000000))*(x519)*(x522))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
    }

}

}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x155=((cj27)*(sj26));
IkReal x156=((sj25)*(sj26));
IkReal x157=((IkReal(1.00000000000000))*(cj25));
IkReal x158=((cj26)*(sj27));
IkReal x159=((IkReal(1.00000000000000))*(sj25));
IkReal x160=((cj26)*(cj27));
IkReal x161=((IkReal(1.00000000000000))*(sj26)*(sj27));
IkReal x162=((((IkReal(-1.00000000000000))*(sj27)*(x159)))+(((cj25)*(x160))));
IkReal x163=((((IkReal(-1.00000000000000))*(cj27)*(x157)))+(((sj25)*(x158))));
IkReal x164=((((IkReal(-1.00000000000000))*(x157)*(x158)))+(((IkReal(-1.00000000000000))*(cj27)*(x159))));
IkReal x165=((((IkReal(-1.00000000000000))*(x159)*(x160)))+(((IkReal(-1.00000000000000))*(sj27)*(x157))));
new_r00=((((r01)*(x164)))+(((r00)*(x162)))+(((IkReal(-1.00000000000000))*(r02)*(sj26)*(x157))));
new_r01=((((IkReal(-1.00000000000000))*(r12)*(sj26)*(x157)))+(((r10)*(x162)))+(((r11)*(x164))));
new_r02=((((IkReal(-1.00000000000000))*(r22)*(sj26)*(x157)))+(((r20)*(x162)))+(((r21)*(x164))));
new_r10=((((r00)*(x155)))+(((IkReal(-1.00000000000000))*(r01)*(x161)))+(((cj26)*(r02))));
new_r11=((((cj26)*(r12)))+(((r10)*(x155)))+(((IkReal(-1.00000000000000))*(r11)*(x161))));
new_r12=((((r20)*(x155)))+(((cj26)*(r22)))+(((IkReal(-1.00000000000000))*(r21)*(x161))));
new_r20=((((r01)*(x163)))+(((r00)*(x165)))+(((r02)*(x156))));
new_r21=((((r10)*(x165)))+(((r12)*(x156)))+(((r11)*(x163))));
new_r22=((((r20)*(x165)))+(((r21)*(x163)))+(((r22)*(x156))));
{
IkReal j23array[2], cj23array[2], sj23array[2];
bool j23valid[2]={false};
_nj23 = 2;
sj23array[0]=((IkReal(-1.00000000000000))*(new_r22));
if( sj23array[0] >= -1-IKFAST_SINCOS_THRESH && sj23array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j23valid[0] = j23valid[1] = true;
    j23array[0] = IKasin(sj23array[0]);
    cj23array[0] = IKcos(j23array[0]);
    sj23array[1] = sj23array[0];
    j23array[1] = j23array[0] > 0 ? (IKPI-j23array[0]) : (-IKPI-j23array[0]);
    cj23array[1] = -cj23array[0];
}
else if( isnan(sj23array[0]) )
{
    // probably any value will work
    j23valid[0] = true;
    cj23array[0] = 1; sj23array[0] = 0; j23array[0] = 0;
}
for(int ij23 = 0; ij23 < 2; ++ij23)
{
if( !j23valid[ij23] )
{
    continue;
}
_ij23[0] = ij23; _ij23[1] = -1;
for(int iij23 = ij23+1; iij23 < 2; ++iij23)
{
if( j23valid[iij23] && IKabs(cj23array[ij23]-cj23array[iij23]) < IKFAST_SOLUTION_THRESH && IKabs(sj23array[ij23]-sj23array[iij23]) < IKFAST_SOLUTION_THRESH )
{
    j23valid[iij23]=false; _ij23[1] = iij23; break; 
}
}
j23 = j23array[ij23]; cj23 = cj23array[ij23]; sj23 = sj23array[ij23];

{
IkReal dummyeval[1];
IkReal gconst63;
gconst63=IKsign(cj23);
dummyeval[0]=cj23;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst64;
gconst64=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst65;
gconst65=IKsign(((((cj23)*(new_r10)*(new_r12)))+(((cj23)*(new_r00)*(new_r02)))));
dummyeval[0]=((((cj23)*(new_r10)*(new_r12)))+(((cj23)*(new_r00)*(new_r02))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j23)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(1.00000000000000))+(new_r22));
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[5]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[6]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j24array[2], cj24array[2], sj24array[2];
bool j24valid[2]={false};
_nj24 = 2;
if( IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x166=IKatan2(new_r12, new_r02);
j24array[0]=((IkReal(-1.00000000000000))*(x166));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
j24array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x166))));
sj24array[1]=IKsin(j24array[1]);
cj24array[1]=IKcos(j24array[1]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
if( j24array[1] > IKPI )
{
    j24array[1]-=IK2PI;
}
else if( j24array[1] < -IKPI )
{    j24array[1]+=IK2PI;
}
j24valid[1] = true;
for(int ij24 = 0; ij24 < 2; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 2; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[1];
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r12)*(IKsin(j24))))+(((new_r02)*(IKcos(j24)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
if( IKabs(((((new_r00)*(sj24)))+(((cj24)*(new_r10))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(new_r01)*(sj24)))+(((IkReal(-1.00000000000000))*(cj24)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((new_r00)*(sj24)))+(((cj24)*(new_r10)))))+IKsqr(((((IkReal(-1.00000000000000))*(new_r01)*(sj24)))+(((IkReal(-1.00000000000000))*(cj24)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2(((((new_r00)*(sj24)))+(((cj24)*(new_r10)))), ((((IkReal(-1.00000000000000))*(new_r01)*(sj24)))+(((IkReal(-1.00000000000000))*(cj24)*(new_r11)))));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[4];
IkReal x167=IKcos(j22);
IkReal x168=((IkReal(1.00000000000000))*(sj24));
IkReal x169=((IkReal(1.00000000000000))*(IKsin(j22)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r10)*(x168)))+(((IkReal(-1.00000000000000))*(x167)))+(((cj24)*(new_r00))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x169)))+(((IkReal(-1.00000000000000))*(new_r11)*(x168)))+(((cj24)*(new_r01))));
evalcond[2]=((((new_r01)*(sj24)))+(x167)+(((cj24)*(new_r11))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x169)))+(((new_r00)*(sj24)))+(((cj24)*(new_r10))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
IkReal x170=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j23)), IkReal(6.28318530717959))));
evalcond[1]=x170;
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x170;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j24array[2], cj24array[2], sj24array[2];
bool j24valid[2]={false};
_nj24 = 2;
if( IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x171=IKatan2(new_r12, new_r02);
j24array[0]=((IkReal(-1.00000000000000))*(x171));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
j24array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x171))));
sj24array[1]=IKsin(j24array[1]);
cj24array[1]=IKcos(j24array[1]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
if( j24array[1] > IKPI )
{
    j24array[1]-=IK2PI;
}
else if( j24array[1] < -IKPI )
{    j24array[1]+=IK2PI;
}
j24valid[1] = true;
for(int ij24 = 0; ij24 < 2; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 2; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[1];
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r12)*(IKsin(j24))))+(((new_r02)*(IKcos(j24)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r00)*(sj24)))+(((IkReal(-1.00000000000000))*(cj24)*(new_r10))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r01)*(sj24)))+(((cj24)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r00)*(sj24)))+(((IkReal(-1.00000000000000))*(cj24)*(new_r10)))))+IKsqr(((((new_r01)*(sj24)))+(((cj24)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r00)*(sj24)))+(((IkReal(-1.00000000000000))*(cj24)*(new_r10)))), ((((new_r01)*(sj24)))+(((cj24)*(new_r11)))));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[4];
IkReal x172=IKsin(j22);
IkReal x173=((IkReal(1.00000000000000))*(sj24));
IkReal x174=((IkReal(1.00000000000000))*(IKcos(j22)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x174)))+(((IkReal(-1.00000000000000))*(new_r10)*(x173)))+(((cj24)*(new_r00))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x172)))+(((IkReal(-1.00000000000000))*(new_r11)*(x173)))+(((cj24)*(new_r01))));
evalcond[2]=((((new_r01)*(sj24)))+(((IkReal(-1.00000000000000))*(x174)))+(((cj24)*(new_r11))));
evalcond[3]=((((new_r00)*(sj24)))+(x172)+(((cj24)*(new_r10))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
IkReal x175=((gconst65)*(new_r20)*(sj23));
if( IKabs(((new_r02)*(x175))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r12)*(x175))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j24array[0]=IKatan2(((new_r02)*(x175)), ((new_r12)*(x175)));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[6];
IkReal x176=IKcos(j24);
IkReal x177=IKsin(j24);
IkReal x178=((IkReal(1.00000000000000))*(sj23));
IkReal x179=((IkReal(1.00000000000000))*(cj23));
IkReal x180=((cj23)*(x176));
IkReal x181=((new_r12)*(x176));
IkReal x182=((new_r02)*(x177));
IkReal x183=((cj23)*(x177));
evalcond[0]=((((new_r02)*(x176)))+(((IkReal(-1.00000000000000))*(new_r12)*(x177))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x179)))+(x181)+(x182));
evalcond[2]=((((new_r10)*(x180)))+(((new_r00)*(x183)))+(((IkReal(-1.00000000000000))*(new_r20)*(x178))));
evalcond[3]=((((new_r11)*(x180)))+(((IkReal(-1.00000000000000))*(new_r21)*(x178)))+(((new_r01)*(x183))));
evalcond[4]=((IkReal(-1.00000000000000))+(((new_r12)*(x180)))+(((cj23)*(x182)))+(((IkReal(-1.00000000000000))*(new_r22)*(x178))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x178)*(x182)))+(((IkReal(-1.00000000000000))*(x178)*(x181)))+(((IkReal(-1.00000000000000))*(new_r22)*(x179))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst66;
gconst66=IKsign(cj23);
dummyeval[0]=cj23;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj23;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=sj23;
dummyeval[1]=cj23;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x184=((((cj24)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r12)*(sj24))));
IkReal x185=((((new_r00)*(sj24)))+(((cj24)*(new_r10))));
IkReal x186=((((new_r01)*(sj24)))+(((cj24)*(new_r11))));
IkReal x187=((IkReal(-1.00000000000000))+(((cj24)*(new_r12)))+(((new_r02)*(sj24))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j23)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=x184;
evalcond[3]=x184;
evalcond[4]=x187;
evalcond[5]=x186;
evalcond[6]=x185;
evalcond[7]=x185;
evalcond[8]=x186;
evalcond[9]=x187;
evalcond[10]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(((IkReal(-1.00000000000000))*(new_r21)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2(new_r20, ((IkReal(-1.00000000000000))*(new_r21)));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[4];
IkReal x188=IKcos(j22);
IkReal x189=((IkReal(1.00000000000000))*(sj24));
IkReal x190=((IkReal(1.00000000000000))*(IKsin(j22)));
evalcond[0]=((x188)+(new_r21));
evalcond[1]=((((IkReal(-1.00000000000000))*(x190)))+(new_r20));
evalcond[2]=((((IkReal(-1.00000000000000))*(x188)))+(((IkReal(-1.00000000000000))*(new_r10)*(x189)))+(((cj24)*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x190)))+(((IkReal(-1.00000000000000))*(new_r11)*(x189)))+(((cj24)*(new_r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x191=((new_r02)*(sj24));
IkReal x192=((IkReal(1.00000000000000))*(sj24));
IkReal x193=((cj24)*(new_r10));
IkReal x194=((cj24)*(new_r12));
IkReal x195=((cj24)*(new_r11));
IkReal x196=((((IkReal(-1.00000000000000))*(new_r12)*(x192)))+(((cj24)*(new_r02))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j23, IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=x196;
evalcond[3]=x196;
evalcond[4]=((IkReal(1.00000000000000))+(x191)+(x194));
evalcond[5]=((((new_r01)*(sj24)))+(x195));
evalcond[6]=((((new_r00)*(sj24)))+(x193));
evalcond[7]=((((IkReal(-1.00000000000000))*(x193)))+(((IkReal(-1.00000000000000))*(new_r00)*(x192))));
evalcond[8]=((((IkReal(-1.00000000000000))*(x195)))+(((IkReal(-1.00000000000000))*(new_r01)*(x192))));
evalcond[9]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(x194)))+(((IkReal(-1.00000000000000))*(x191))));
evalcond[10]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r20)))+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r20)), new_r21);
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[4];
IkReal x197=IKsin(j22);
IkReal x198=((IkReal(1.00000000000000))*(sj24));
IkReal x199=((IkReal(1.00000000000000))*(IKcos(j22)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x199)))+(new_r21));
evalcond[1]=((x197)+(new_r20));
evalcond[2]=((((IkReal(-1.00000000000000))*(x199)))+(((IkReal(-1.00000000000000))*(new_r10)*(x198)))+(((cj24)*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x197)))+(((IkReal(-1.00000000000000))*(new_r11)*(x198)))+(((cj24)*(new_r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x200=((new_r02)*(sj24));
IkReal x201=((IkReal(1.00000000000000))*(new_r12));
IkReal x202=((((IkReal(-1.00000000000000))*(sj24)*(x201)))+(((cj24)*(new_r02))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j23)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(1.00000000000000))+(new_r22));
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=x202;
evalcond[5]=x202;
evalcond[6]=((x200)+(((cj24)*(new_r12))));
evalcond[7]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[8]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[9]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
evalcond[10]=((((IkReal(-1.00000000000000))*(cj24)*(x201)))+(((IkReal(-1.00000000000000))*(x200))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
if( IKabs(((((new_r00)*(sj24)))+(((cj24)*(new_r10))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(new_r01)*(sj24)))+(((IkReal(-1.00000000000000))*(cj24)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((new_r00)*(sj24)))+(((cj24)*(new_r10)))))+IKsqr(((((IkReal(-1.00000000000000))*(new_r01)*(sj24)))+(((IkReal(-1.00000000000000))*(cj24)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2(((((new_r00)*(sj24)))+(((cj24)*(new_r10)))), ((((IkReal(-1.00000000000000))*(new_r01)*(sj24)))+(((IkReal(-1.00000000000000))*(cj24)*(new_r11)))));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[4];
IkReal x203=IKcos(j22);
IkReal x204=((IkReal(1.00000000000000))*(sj24));
IkReal x205=((IkReal(1.00000000000000))*(IKsin(j22)));
evalcond[0]=((((cj24)*(new_r00)))+(((IkReal(-1.00000000000000))*(x203)))+(((IkReal(-1.00000000000000))*(new_r10)*(x204))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x205)))+(((cj24)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x204))));
evalcond[2]=((((new_r01)*(sj24)))+(x203)+(((cj24)*(new_r11))));
evalcond[3]=((((new_r00)*(sj24)))+(((IkReal(-1.00000000000000))*(x205)))+(((cj24)*(new_r10))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x206=((IkReal(-1.00000000000000))+(new_r22));
IkReal x207=((((cj24)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r12)*(sj24))));
IkReal x208=((((cj24)*(new_r12)))+(((new_r02)*(sj24))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j23)), IkReal(6.28318530717959))));
evalcond[1]=x206;
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=x207;
evalcond[5]=x207;
evalcond[6]=x208;
evalcond[7]=new_r20;
evalcond[8]=new_r21;
evalcond[9]=x206;
evalcond[10]=x208;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r00)*(sj24)))+(((IkReal(-1.00000000000000))*(cj24)*(new_r10))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r01)*(sj24)))+(((cj24)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r00)*(sj24)))+(((IkReal(-1.00000000000000))*(cj24)*(new_r10)))))+IKsqr(((((new_r01)*(sj24)))+(((cj24)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r00)*(sj24)))+(((IkReal(-1.00000000000000))*(cj24)*(new_r10)))), ((((new_r01)*(sj24)))+(((cj24)*(new_r11)))));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[4];
IkReal x209=IKsin(j22);
IkReal x210=((IkReal(1.00000000000000))*(sj24));
IkReal x211=((IkReal(1.00000000000000))*(IKcos(j22)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r10)*(x210)))+(((cj24)*(new_r00)))+(((IkReal(-1.00000000000000))*(x211))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r11)*(x210)))+(((cj24)*(new_r01)))+(((IkReal(-1.00000000000000))*(x209))));
evalcond[2]=((((new_r01)*(sj24)))+(((cj24)*(new_r11)))+(((IkReal(-1.00000000000000))*(x211))));
evalcond[3]=((((new_r00)*(sj24)))+(x209)+(((cj24)*(new_r10))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
if( IKabs(((((IKabs(sj23) != 0)?((IkReal)1/(sj23)):(IkReal)1.0e30))*(((((new_r00)*(sj24)))+(((cj24)*(new_r10))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj23) != 0)?((IkReal)1/(cj23)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(sj23) != 0)?((IkReal)1/(sj23)):(IkReal)1.0e30))*(((((new_r00)*(sj24)))+(((cj24)*(new_r10)))))))+IKsqr(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj23) != 0)?((IkReal)1/(cj23)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2(((((IKabs(sj23) != 0)?((IkReal)1/(sj23)):(IkReal)1.0e30))*(((((new_r00)*(sj24)))+(((cj24)*(new_r10)))))), ((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj23) != 0)?((IkReal)1/(cj23)):(IkReal)1.0e30))));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x212=IKcos(j22);
IkReal x213=IKsin(j22);
IkReal x214=((cj24)*(new_r10));
IkReal x215=((IkReal(1.00000000000000))*(sj23));
IkReal x216=((new_r00)*(sj24));
IkReal x217=((cj24)*(new_r11));
IkReal x218=((IkReal(1.00000000000000))*(sj24));
IkReal x219=((new_r01)*(sj24));
IkReal x220=((IkReal(1.00000000000000))*(cj23));
IkReal x221=((IkReal(1.00000000000000))*(x212));
evalcond[0]=((new_r21)+(((cj23)*(x212))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x213)*(x220)))+(new_r20));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)*(x218)))+(((cj24)*(new_r00)))+(((IkReal(-1.00000000000000))*(x221))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r11)*(x218)))+(((IkReal(-1.00000000000000))*(x213)))+(((cj24)*(new_r01))));
evalcond[4]=((x217)+(x219)+(((sj23)*(x212))));
evalcond[5]=((x214)+(x216)+(((IkReal(-1.00000000000000))*(x213)*(x215))));
evalcond[6]=((x213)+(((IkReal(-1.00000000000000))*(x214)*(x215)))+(((IkReal(-1.00000000000000))*(new_r20)*(x220)))+(((IkReal(-1.00000000000000))*(x215)*(x216))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r21)*(x220)))+(((IkReal(-1.00000000000000))*(x221)))+(((IkReal(-1.00000000000000))*(x215)*(x217)))+(((IkReal(-1.00000000000000))*(x215)*(x219))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r11)*(sj24)))+(((cj24)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj23) != 0)?((IkReal)1/(cj23)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r11)*(sj24)))+(((cj24)*(new_r01)))))+IKsqr(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj23) != 0)?((IkReal)1/(cj23)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r11)*(sj24)))+(((cj24)*(new_r01)))), ((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj23) != 0)?((IkReal)1/(cj23)):(IkReal)1.0e30))));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x222=IKcos(j22);
IkReal x223=IKsin(j22);
IkReal x224=((cj24)*(new_r10));
IkReal x225=((IkReal(1.00000000000000))*(sj23));
IkReal x226=((new_r00)*(sj24));
IkReal x227=((cj24)*(new_r11));
IkReal x228=((IkReal(1.00000000000000))*(sj24));
IkReal x229=((new_r01)*(sj24));
IkReal x230=((IkReal(1.00000000000000))*(cj23));
IkReal x231=((IkReal(1.00000000000000))*(x222));
evalcond[0]=((((cj23)*(x222)))+(new_r21));
evalcond[1]=((((IkReal(-1.00000000000000))*(x223)*(x230)))+(new_r20));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)*(x228)))+(((IkReal(-1.00000000000000))*(x231)))+(((cj24)*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r11)*(x228)))+(((cj24)*(new_r01)))+(((IkReal(-1.00000000000000))*(x223))));
evalcond[4]=((((sj23)*(x222)))+(x229)+(x227));
evalcond[5]=((x224)+(x226)+(((IkReal(-1.00000000000000))*(x223)*(x225))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x224)*(x225)))+(((IkReal(-1.00000000000000))*(new_r20)*(x230)))+(((IkReal(-1.00000000000000))*(x225)*(x226)))+(x223));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r21)*(x230)))+(((IkReal(-1.00000000000000))*(x225)*(x227)))+(((IkReal(-1.00000000000000))*(x225)*(x229)))+(((IkReal(-1.00000000000000))*(x231))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
if( IKabs(((gconst66)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst66)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j22array[0]=IKatan2(((gconst66)*(new_r20)), ((IkReal(-1.00000000000000))*(gconst66)*(new_r21)));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x232=IKcos(j22);
IkReal x233=IKsin(j22);
IkReal x234=((cj24)*(new_r10));
IkReal x235=((IkReal(1.00000000000000))*(sj23));
IkReal x236=((new_r00)*(sj24));
IkReal x237=((cj24)*(new_r11));
IkReal x238=((IkReal(1.00000000000000))*(sj24));
IkReal x239=((new_r01)*(sj24));
IkReal x240=((IkReal(1.00000000000000))*(cj23));
IkReal x241=((IkReal(1.00000000000000))*(x232));
evalcond[0]=((((cj23)*(x232)))+(new_r21));
evalcond[1]=((((IkReal(-1.00000000000000))*(x233)*(x240)))+(new_r20));
evalcond[2]=((((cj24)*(new_r00)))+(((IkReal(-1.00000000000000))*(x241)))+(((IkReal(-1.00000000000000))*(new_r10)*(x238))));
evalcond[3]=((((cj24)*(new_r01)))+(((IkReal(-1.00000000000000))*(x233)))+(((IkReal(-1.00000000000000))*(new_r11)*(x238))));
evalcond[4]=((((sj23)*(x232)))+(x239)+(x237));
evalcond[5]=((((IkReal(-1.00000000000000))*(x233)*(x235)))+(x236)+(x234));
evalcond[6]=((((IkReal(-1.00000000000000))*(x235)*(x236)))+(x233)+(((IkReal(-1.00000000000000))*(new_r20)*(x240)))+(((IkReal(-1.00000000000000))*(x234)*(x235))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x235)*(x237)))+(((IkReal(-1.00000000000000))*(x235)*(x239)))+(((IkReal(-1.00000000000000))*(new_r21)*(x240)))+(((IkReal(-1.00000000000000))*(x241))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
IkReal x242=((cj23)*(gconst64));
if( IKabs(((new_r02)*(x242))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r12)*(x242))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j24array[0]=IKatan2(((new_r02)*(x242)), ((new_r12)*(x242)));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[6];
IkReal x243=IKcos(j24);
IkReal x244=IKsin(j24);
IkReal x245=((IkReal(1.00000000000000))*(sj23));
IkReal x246=((IkReal(1.00000000000000))*(cj23));
IkReal x247=((cj23)*(x243));
IkReal x248=((new_r12)*(x243));
IkReal x249=((new_r02)*(x244));
IkReal x250=((cj23)*(x244));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r12)*(x244)))+(((new_r02)*(x243))));
evalcond[1]=((x249)+(x248)+(((IkReal(-1.00000000000000))*(x246))));
evalcond[2]=((((new_r00)*(x250)))+(((IkReal(-1.00000000000000))*(new_r20)*(x245)))+(((new_r10)*(x247))));
evalcond[3]=((((new_r01)*(x250)))+(((IkReal(-1.00000000000000))*(new_r21)*(x245)))+(((new_r11)*(x247))));
evalcond[4]=((IkReal(-1.00000000000000))+(((new_r12)*(x247)))+(((IkReal(-1.00000000000000))*(new_r22)*(x245)))+(((cj23)*(x249))));
evalcond[5]=((((IkReal(-1.00000000000000))*(new_r22)*(x246)))+(((IkReal(-1.00000000000000))*(x245)*(x248)))+(((IkReal(-1.00000000000000))*(x245)*(x249))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst66;
gconst66=IKsign(cj23);
dummyeval[0]=cj23;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj23;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=sj23;
dummyeval[1]=cj23;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x251=((((cj24)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r12)*(sj24))));
IkReal x252=((((new_r00)*(sj24)))+(((cj24)*(new_r10))));
IkReal x253=((((new_r01)*(sj24)))+(((cj24)*(new_r11))));
IkReal x254=((IkReal(-1.00000000000000))+(((cj24)*(new_r12)))+(((new_r02)*(sj24))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j23)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=x251;
evalcond[3]=x251;
evalcond[4]=x254;
evalcond[5]=x253;
evalcond[6]=x252;
evalcond[7]=x252;
evalcond[8]=x253;
evalcond[9]=x254;
evalcond[10]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(((IkReal(-1.00000000000000))*(new_r21)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2(new_r20, ((IkReal(-1.00000000000000))*(new_r21)));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[4];
IkReal x255=IKcos(j22);
IkReal x256=((IkReal(1.00000000000000))*(sj24));
IkReal x257=((IkReal(1.00000000000000))*(IKsin(j22)));
evalcond[0]=((x255)+(new_r21));
evalcond[1]=((new_r20)+(((IkReal(-1.00000000000000))*(x257))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)*(x256)))+(((cj24)*(new_r00)))+(((IkReal(-1.00000000000000))*(x255))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r11)*(x256)))+(((cj24)*(new_r01)))+(((IkReal(-1.00000000000000))*(x257))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x258=((new_r02)*(sj24));
IkReal x259=((IkReal(1.00000000000000))*(sj24));
IkReal x260=((cj24)*(new_r10));
IkReal x261=((cj24)*(new_r12));
IkReal x262=((cj24)*(new_r11));
IkReal x263=((((cj24)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r12)*(x259))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j23, IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=x263;
evalcond[3]=x263;
evalcond[4]=((IkReal(1.00000000000000))+(x258)+(x261));
evalcond[5]=((((new_r01)*(sj24)))+(x262));
evalcond[6]=((((new_r00)*(sj24)))+(x260));
evalcond[7]=((((IkReal(-1.00000000000000))*(x260)))+(((IkReal(-1.00000000000000))*(new_r00)*(x259))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r01)*(x259)))+(((IkReal(-1.00000000000000))*(x262))));
evalcond[9]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(x261)))+(((IkReal(-1.00000000000000))*(x258))));
evalcond[10]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r20)))+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r20)), new_r21);
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[4];
IkReal x264=IKsin(j22);
IkReal x265=((IkReal(1.00000000000000))*(sj24));
IkReal x266=((IkReal(1.00000000000000))*(IKcos(j22)));
evalcond[0]=((new_r21)+(((IkReal(-1.00000000000000))*(x266))));
evalcond[1]=((x264)+(new_r20));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)*(x265)))+(((cj24)*(new_r00)))+(((IkReal(-1.00000000000000))*(x266))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x264)))+(((IkReal(-1.00000000000000))*(new_r11)*(x265)))+(((cj24)*(new_r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x267=((new_r02)*(sj24));
IkReal x268=((IkReal(1.00000000000000))*(new_r12));
IkReal x269=((((IkReal(-1.00000000000000))*(sj24)*(x268)))+(((cj24)*(new_r02))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j23)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(1.00000000000000))+(new_r22));
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=x269;
evalcond[5]=x269;
evalcond[6]=((x267)+(((cj24)*(new_r12))));
evalcond[7]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[8]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[9]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
evalcond[10]=((((IkReal(-1.00000000000000))*(x267)))+(((IkReal(-1.00000000000000))*(cj24)*(x268))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
if( IKabs(((((new_r00)*(sj24)))+(((cj24)*(new_r10))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(new_r01)*(sj24)))+(((IkReal(-1.00000000000000))*(cj24)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((new_r00)*(sj24)))+(((cj24)*(new_r10)))))+IKsqr(((((IkReal(-1.00000000000000))*(new_r01)*(sj24)))+(((IkReal(-1.00000000000000))*(cj24)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2(((((new_r00)*(sj24)))+(((cj24)*(new_r10)))), ((((IkReal(-1.00000000000000))*(new_r01)*(sj24)))+(((IkReal(-1.00000000000000))*(cj24)*(new_r11)))));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[4];
IkReal x270=IKcos(j22);
IkReal x271=((IkReal(1.00000000000000))*(sj24));
IkReal x272=((IkReal(1.00000000000000))*(IKsin(j22)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x270)))+(((cj24)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(x271))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r11)*(x271)))+(((cj24)*(new_r01)))+(((IkReal(-1.00000000000000))*(x272))));
evalcond[2]=((((new_r01)*(sj24)))+(x270)+(((cj24)*(new_r11))));
evalcond[3]=((((new_r00)*(sj24)))+(((cj24)*(new_r10)))+(((IkReal(-1.00000000000000))*(x272))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x273=((IkReal(-1.00000000000000))+(new_r22));
IkReal x274=((((cj24)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r12)*(sj24))));
IkReal x275=((((cj24)*(new_r12)))+(((new_r02)*(sj24))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j23)), IkReal(6.28318530717959))));
evalcond[1]=x273;
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=x274;
evalcond[5]=x274;
evalcond[6]=x275;
evalcond[7]=new_r20;
evalcond[8]=new_r21;
evalcond[9]=x273;
evalcond[10]=x275;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r00)*(sj24)))+(((IkReal(-1.00000000000000))*(cj24)*(new_r10))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r01)*(sj24)))+(((cj24)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r00)*(sj24)))+(((IkReal(-1.00000000000000))*(cj24)*(new_r10)))))+IKsqr(((((new_r01)*(sj24)))+(((cj24)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r00)*(sj24)))+(((IkReal(-1.00000000000000))*(cj24)*(new_r10)))), ((((new_r01)*(sj24)))+(((cj24)*(new_r11)))));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[4];
IkReal x276=IKsin(j22);
IkReal x277=((IkReal(1.00000000000000))*(sj24));
IkReal x278=((IkReal(1.00000000000000))*(IKcos(j22)));
evalcond[0]=((((cj24)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(x277)))+(((IkReal(-1.00000000000000))*(x278))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x276)))+(((IkReal(-1.00000000000000))*(new_r11)*(x277)))+(((cj24)*(new_r01))));
evalcond[2]=((((new_r01)*(sj24)))+(((cj24)*(new_r11)))+(((IkReal(-1.00000000000000))*(x278))));
evalcond[3]=((((new_r00)*(sj24)))+(x276)+(((cj24)*(new_r10))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
if( IKabs(((((IKabs(sj23) != 0)?((IkReal)1/(sj23)):(IkReal)1.0e30))*(((((new_r00)*(sj24)))+(((cj24)*(new_r10))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj23) != 0)?((IkReal)1/(cj23)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(sj23) != 0)?((IkReal)1/(sj23)):(IkReal)1.0e30))*(((((new_r00)*(sj24)))+(((cj24)*(new_r10)))))))+IKsqr(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj23) != 0)?((IkReal)1/(cj23)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2(((((IKabs(sj23) != 0)?((IkReal)1/(sj23)):(IkReal)1.0e30))*(((((new_r00)*(sj24)))+(((cj24)*(new_r10)))))), ((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj23) != 0)?((IkReal)1/(cj23)):(IkReal)1.0e30))));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x279=IKcos(j22);
IkReal x280=IKsin(j22);
IkReal x281=((cj24)*(new_r10));
IkReal x282=((IkReal(1.00000000000000))*(sj23));
IkReal x283=((new_r00)*(sj24));
IkReal x284=((cj24)*(new_r11));
IkReal x285=((IkReal(1.00000000000000))*(sj24));
IkReal x286=((new_r01)*(sj24));
IkReal x287=((IkReal(1.00000000000000))*(cj23));
IkReal x288=((IkReal(1.00000000000000))*(x279));
evalcond[0]=((((cj23)*(x279)))+(new_r21));
evalcond[1]=((((IkReal(-1.00000000000000))*(x280)*(x287)))+(new_r20));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)*(x285)))+(((cj24)*(new_r00)))+(((IkReal(-1.00000000000000))*(x288))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x280)))+(((IkReal(-1.00000000000000))*(new_r11)*(x285)))+(((cj24)*(new_r01))));
evalcond[4]=((((sj23)*(x279)))+(x286)+(x284));
evalcond[5]=((((IkReal(-1.00000000000000))*(x280)*(x282)))+(x283)+(x281));
evalcond[6]=((((IkReal(-1.00000000000000))*(x281)*(x282)))+(x280)+(((IkReal(-1.00000000000000))*(x282)*(x283)))+(((IkReal(-1.00000000000000))*(new_r20)*(x287))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x282)*(x286)))+(((IkReal(-1.00000000000000))*(x282)*(x284)))+(((IkReal(-1.00000000000000))*(x288)))+(((IkReal(-1.00000000000000))*(new_r21)*(x287))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r11)*(sj24)))+(((cj24)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj23) != 0)?((IkReal)1/(cj23)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r11)*(sj24)))+(((cj24)*(new_r01)))))+IKsqr(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj23) != 0)?((IkReal)1/(cj23)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j22array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r11)*(sj24)))+(((cj24)*(new_r01)))), ((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj23) != 0)?((IkReal)1/(cj23)):(IkReal)1.0e30))));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x289=IKcos(j22);
IkReal x290=IKsin(j22);
IkReal x291=((cj24)*(new_r10));
IkReal x292=((IkReal(1.00000000000000))*(sj23));
IkReal x293=((new_r00)*(sj24));
IkReal x294=((cj24)*(new_r11));
IkReal x295=((IkReal(1.00000000000000))*(sj24));
IkReal x296=((new_r01)*(sj24));
IkReal x297=((IkReal(1.00000000000000))*(cj23));
IkReal x298=((IkReal(1.00000000000000))*(x289));
evalcond[0]=((((cj23)*(x289)))+(new_r21));
evalcond[1]=((((IkReal(-1.00000000000000))*(x290)*(x297)))+(new_r20));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)*(x295)))+(((IkReal(-1.00000000000000))*(x298)))+(((cj24)*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x290)))+(((IkReal(-1.00000000000000))*(new_r11)*(x295)))+(((cj24)*(new_r01))));
evalcond[4]=((x294)+(x296)+(((sj23)*(x289))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x290)*(x292)))+(x291)+(x293));
evalcond[6]=((((IkReal(-1.00000000000000))*(x291)*(x292)))+(((IkReal(-1.00000000000000))*(new_r20)*(x297)))+(x290)+(((IkReal(-1.00000000000000))*(x292)*(x293))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r21)*(x297)))+(((IkReal(-1.00000000000000))*(x298)))+(((IkReal(-1.00000000000000))*(x292)*(x294)))+(((IkReal(-1.00000000000000))*(x292)*(x296))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
if( IKabs(((gconst66)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst66)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j22array[0]=IKatan2(((gconst66)*(new_r20)), ((IkReal(-1.00000000000000))*(gconst66)*(new_r21)));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[8];
IkReal x299=IKcos(j22);
IkReal x300=IKsin(j22);
IkReal x301=((cj24)*(new_r10));
IkReal x302=((IkReal(1.00000000000000))*(sj23));
IkReal x303=((new_r00)*(sj24));
IkReal x304=((cj24)*(new_r11));
IkReal x305=((IkReal(1.00000000000000))*(sj24));
IkReal x306=((new_r01)*(sj24));
IkReal x307=((IkReal(1.00000000000000))*(cj23));
IkReal x308=((IkReal(1.00000000000000))*(x299));
evalcond[0]=((((cj23)*(x299)))+(new_r21));
evalcond[1]=((new_r20)+(((IkReal(-1.00000000000000))*(x300)*(x307))));
evalcond[2]=((((cj24)*(new_r00)))+(((IkReal(-1.00000000000000))*(x308)))+(((IkReal(-1.00000000000000))*(new_r10)*(x305))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x300)))+(((cj24)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x305))));
evalcond[4]=((((sj23)*(x299)))+(x306)+(x304));
evalcond[5]=((x303)+(x301)+(((IkReal(-1.00000000000000))*(x300)*(x302))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x301)*(x302)))+(((IkReal(-1.00000000000000))*(x302)*(x303)))+(((IkReal(-1.00000000000000))*(new_r20)*(x307)))+(x300));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r21)*(x307)))+(((IkReal(-1.00000000000000))*(x302)*(x304)))+(((IkReal(-1.00000000000000))*(x302)*(x306)))+(((IkReal(-1.00000000000000))*(x308))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j22array[1], cj22array[1], sj22array[1];
bool j22valid[1]={false};
_nj22 = 1;
if( IKabs(((gconst63)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst63)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j22array[0]=IKatan2(((gconst63)*(new_r20)), ((IkReal(-1.00000000000000))*(gconst63)*(new_r21)));
sj22array[0]=IKsin(j22array[0]);
cj22array[0]=IKcos(j22array[0]);
if( j22array[0] > IKPI )
{
    j22array[0]-=IK2PI;
}
else if( j22array[0] < -IKPI )
{    j22array[0]+=IK2PI;
}
j22valid[0] = true;
for(int ij22 = 0; ij22 < 1; ++ij22)
{
if( !j22valid[ij22] )
{
    continue;
}
_ij22[0] = ij22; _ij22[1] = -1;
for(int iij22 = ij22+1; iij22 < 1; ++iij22)
{
if( j22valid[iij22] && IKabs(cj22array[ij22]-cj22array[iij22]) < IKFAST_SOLUTION_THRESH && IKabs(sj22array[ij22]-sj22array[iij22]) < IKFAST_SOLUTION_THRESH )
{
    j22valid[iij22]=false; _ij22[1] = iij22; break; 
}
}
j22 = j22array[ij22]; cj22 = cj22array[ij22]; sj22 = sj22array[ij22];
{
IkReal evalcond[2];
evalcond[0]=((((cj23)*(IKcos(j22))))+(new_r21));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj23)*(IKsin(j22))))+(new_r20));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst67;
gconst67=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst68;
gconst68=IKsign(((((IkReal(-1.00000000000000))*(new_r11)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r01)*(new_r02)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r11)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r01)*(new_r02))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
IkReal x309=((cj22)*(gconst68)*(sj23));
if( IKabs(((new_r02)*(x309))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r12)*(x309))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j24array[0]=IKatan2(((new_r02)*(x309)), ((new_r12)*(x309)));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[12];
IkReal x310=IKcos(j24);
IkReal x311=IKsin(j24);
IkReal x312=((IkReal(1.00000000000000))*(cj22));
IkReal x313=((IkReal(1.00000000000000))*(new_r22));
IkReal x314=((IkReal(1.00000000000000))*(sj23));
IkReal x315=((IkReal(1.00000000000000))*(cj23));
IkReal x316=((new_r12)*(x310));
IkReal x317=((new_r10)*(x310));
IkReal x318=((new_r01)*(x311));
IkReal x319=((new_r00)*(x311));
IkReal x320=((new_r02)*(x311));
IkReal x321=((IkReal(1.00000000000000))*(x311));
IkReal x322=((new_r11)*(x310));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r12)*(x321)))+(((new_r02)*(x310))));
evalcond[1]=((x320)+(x316)+(((IkReal(-1.00000000000000))*(x315))));
evalcond[2]=((((new_r00)*(x310)))+(((IkReal(-1.00000000000000))*(x312)))+(((IkReal(-1.00000000000000))*(new_r10)*(x321))));
evalcond[3]=((((new_r01)*(x310)))+(((IkReal(-1.00000000000000))*(sj22)))+(((IkReal(-1.00000000000000))*(new_r11)*(x321))));
evalcond[4]=((((cj22)*(sj23)))+(x322)+(x318));
evalcond[5]=((((IkReal(-1.00000000000000))*(sj22)*(x314)))+(x319)+(x317));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r20)*(x314)))+(((cj23)*(x319)))+(((cj23)*(x317))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r21)*(x314)))+(((cj23)*(x322)))+(((cj23)*(x318))));
evalcond[8]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(sj23)*(x313)))+(((cj23)*(x320)))+(((cj23)*(x316))));
evalcond[9]=((((IkReal(-1.00000000000000))*(x314)*(x320)))+(((IkReal(-1.00000000000000))*(cj23)*(x313)))+(((IkReal(-1.00000000000000))*(x314)*(x316))));
evalcond[10]=((((IkReal(-1.00000000000000))*(new_r20)*(x315)))+(sj22)+(((IkReal(-1.00000000000000))*(x314)*(x317)))+(((IkReal(-1.00000000000000))*(x314)*(x319))));
evalcond[11]=((((IkReal(-1.00000000000000))*(new_r21)*(x315)))+(((IkReal(-1.00000000000000))*(x314)*(x322)))+(((IkReal(-1.00000000000000))*(x312)))+(((IkReal(-1.00000000000000))*(x314)*(x318))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j24array[1], cj24array[1], sj24array[1];
bool j24valid[1]={false};
_nj24 = 1;
IkReal x323=((cj23)*(gconst67));
if( IKabs(((new_r02)*(x323))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r12)*(x323))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j24array[0]=IKatan2(((new_r02)*(x323)), ((new_r12)*(x323)));
sj24array[0]=IKsin(j24array[0]);
cj24array[0]=IKcos(j24array[0]);
if( j24array[0] > IKPI )
{
    j24array[0]-=IK2PI;
}
else if( j24array[0] < -IKPI )
{    j24array[0]+=IK2PI;
}
j24valid[0] = true;
for(int ij24 = 0; ij24 < 1; ++ij24)
{
if( !j24valid[ij24] )
{
    continue;
}
_ij24[0] = ij24; _ij24[1] = -1;
for(int iij24 = ij24+1; iij24 < 1; ++iij24)
{
if( j24valid[iij24] && IKabs(cj24array[ij24]-cj24array[iij24]) < IKFAST_SOLUTION_THRESH && IKabs(sj24array[ij24]-sj24array[iij24]) < IKFAST_SOLUTION_THRESH )
{
    j24valid[iij24]=false; _ij24[1] = iij24; break; 
}
}
j24 = j24array[ij24]; cj24 = cj24array[ij24]; sj24 = sj24array[ij24];
{
IkReal evalcond[12];
IkReal x324=IKcos(j24);
IkReal x325=IKsin(j24);
IkReal x326=((IkReal(1.00000000000000))*(cj22));
IkReal x327=((IkReal(1.00000000000000))*(new_r22));
IkReal x328=((IkReal(1.00000000000000))*(sj23));
IkReal x329=((IkReal(1.00000000000000))*(cj23));
IkReal x330=((new_r12)*(x324));
IkReal x331=((new_r10)*(x324));
IkReal x332=((new_r01)*(x325));
IkReal x333=((new_r00)*(x325));
IkReal x334=((new_r02)*(x325));
IkReal x335=((IkReal(1.00000000000000))*(x325));
IkReal x336=((new_r11)*(x324));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r12)*(x335)))+(((new_r02)*(x324))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x329)))+(x330)+(x334));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)*(x335)))+(((new_r00)*(x324)))+(((IkReal(-1.00000000000000))*(x326))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r11)*(x335)))+(((new_r01)*(x324)))+(((IkReal(-1.00000000000000))*(sj22))));
evalcond[4]=((((cj22)*(sj23)))+(x332)+(x336));
evalcond[5]=((x333)+(x331)+(((IkReal(-1.00000000000000))*(sj22)*(x328))));
evalcond[6]=((((cj23)*(x331)))+(((cj23)*(x333)))+(((IkReal(-1.00000000000000))*(new_r20)*(x328))));
evalcond[7]=((((cj23)*(x336)))+(((cj23)*(x332)))+(((IkReal(-1.00000000000000))*(new_r21)*(x328))));
evalcond[8]=((IkReal(-1.00000000000000))+(((cj23)*(x334)))+(((cj23)*(x330)))+(((IkReal(-1.00000000000000))*(sj23)*(x327))));
evalcond[9]=((((IkReal(-1.00000000000000))*(cj23)*(x327)))+(((IkReal(-1.00000000000000))*(x328)*(x330)))+(((IkReal(-1.00000000000000))*(x328)*(x334))));
evalcond[10]=((((IkReal(-1.00000000000000))*(x328)*(x333)))+(((IkReal(-1.00000000000000))*(x328)*(x331)))+(sj22)+(((IkReal(-1.00000000000000))*(new_r20)*(x329))));
evalcond[11]=((((IkReal(-1.00000000000000))*(x328)*(x332)))+(((IkReal(-1.00000000000000))*(x328)*(x336)))+(((IkReal(-1.00000000000000))*(x326)))+(((IkReal(-1.00000000000000))*(new_r21)*(x329))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j22;
vinfos[0].indices[0] = _ij22[0];
vinfos[0].indices[1] = _ij22[1];
vinfos[0].maxsolutions = _nj22;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j23;
vinfos[1].indices[0] = _ij23[0];
vinfos[1].indices[1] = _ij23[1];
vinfos[1].maxsolutions = _nj23;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j24;
vinfos[2].indices[0] = _ij24[0];
vinfos[2].indices[1] = _ij24[1];
vinfos[2].maxsolutions = _nj24;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j25;
vinfos[3].indices[0] = _ij25[0];
vinfos[3].indices[1] = _ij25[1];
vinfos[3].maxsolutions = _nj25;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j26;
vinfos[4].indices[0] = _ij26[0];
vinfos[4].indices[1] = _ij26[1];
vinfos[4].maxsolutions = _nj26;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j27;
vinfos[5].indices[0] = _ij27[0];
vinfos[5].indices[1] = _ij27[1];
vinfos[5].maxsolutions = _nj27;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int& numroots)
{
    using std::complex;
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                if( abs(roots[i]-roots[j]) < 8*tolsqrt ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:genericrobot - huboplus (44dd951827d150691e298e00fb017ec2)>"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
